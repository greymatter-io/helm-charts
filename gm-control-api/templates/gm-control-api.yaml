apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.gmControlApi.name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.gmControlApi.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.gmControlApi.name }}
      deployment: {{ .Values.gmControlApi.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.gmControlApi.name }}
        deployment: {{ .Values.gmControlApi.name }}
    spec:
      containers:
        - name: {{ .Values.gmControlApi.name }}
          image: {{ tpl .Values.gmControlApi.image $ }}
          imagePullPolicy: {{ .Values.gmControlApi.imagePullPolicy }}
          env:
            {{- include "envvars" (dict "envvar" .Values.gmControlApi.envvars "top" $) | indent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.gmControlApi.containerPort }}
              protocol: TCP
          
          # We don't want to kill the container if it's taking a while to start up, we'll just remove it from the service
          readinessProbe:
            httpGet:
              path: /v1.0/cluster
              port: http
              httpHeaders:
                # For production we'll need a valid authentication credential here
                # We may want to create a separate healthcheck endpoint to remove this issue
                - name: Authorization
                  value: Bearer xxx
            # Pods are considered to be in a Failure state before the initialDelaySeconds has passed, meaning they won't be backends for a service
            initialDelaySeconds: 5
            periodSeconds: 2
          # We want to restart the container if it's failed 3 requests spaced 3 seconds apart after we've given it quite enough time to start up and be initialized
          # We give a full minute before we start health-checking for failures
          livenessProbe:
            httpGet:
              path: /v1.0/cluster
              port: http
              httpHeaders:
                - name: Authorization
                  value: Bearer xxx
            initialDelaySeconds: 60
            periodSeconds: 3
          {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- end }}
          volumeMounts:
            - name: prometheus-data
              mountPath: {{ .Values.gmControlApi.pvcMountPoint }}
        - name: sidecar   
          image: {{ tpl .Values.sidecar.image $ | quote }}
          imagePullPolicy: {{ .Values.sidecar.imagePullPolicy }}
          {{- if .Values.sidecar.resources }}
          resources:
{{ toYaml .Values.sidecar.resources | indent 12 }}
          {{- end }}
          ports:
            - name: proxy
              containerPort: 8080
            - name: metrics
              containerPort: 8081
          env:
          {{- include "greymatter.envvars" . | indent 12 }}
        {{- if .Values.global.spire.enabled }}
          volumeMounts:
          {{- include "sidecar_volume_mounts" . | indent 12 }}
          {{- else if and (not .Values.global.spire.enabled) (.Values.global.mesh_tls.use_provided_certs) }}
          volumeMounts:
          {{- include "sidecar_volume_certs_mount" . | indent 12 }}
          {{- end }}
      imagePullSecrets:
        - name: docker.secret
      volumes:
      {{- if .Values.global.spire.enabled }}
      {{- include "sidecar_volumes" . | indent 6 }}
      {{- else if and (not .Values.global.spire.enabled) (.Values.global.mesh_tls.use_provided_certs) }}
      {{- include "sidecar_certs_volumes" . | indent 6 }}
      {{- end }}
      - name: gm-control-api-backup
        persistentVolumeClaim:
          claimName: gm-control-api-pvc