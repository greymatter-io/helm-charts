node('ubuntu-18.04'){
    try{
      
        def helmVersion = "2.14.0"
        unique_charts=""

        stage ('Get Code') {
            checkout scm
        }

        // Do some git and bash magic to find the charts that were updated in this pull request and ignore the ci folder
        
        stage ('Find Charts'){ 
            sh '''#!/bin/bash
                # check to see if the chart.txt file exists.  If so, remove it first to ensure we're using a clean file
                [[ -e charts.txt ]] && rm -f charts.txt

                # get a list of all directories (ignoring the .git, ci and . directories)
                charts=$(find . -type d \\( ! -name .git \\)  \\( ! -name ci \\) \\( ! -name . \\) -maxdepth 1)

                # the charts are returned looking like "./dashboard", so we want to strip off the first two characters of each listing
                for chart in $charts; do
                    echo ${chart:2} >> charts.txt
                done
            '''
        }
        
  
        // We need to install Helm to be able to package the charts
         try {
            stage ('Install Helm') {
                sh """
                    curl -L https://storage.googleapis.com/kubernetes-helm/helm-v${helmVersion}-linux-amd64.tar.gz -o helm-v${helmVersion}-linux-amd64.tar.gz
                    mkdir ./helm
                    tar -zxvf helm-v${helmVersion}-linux-amd64.tar.gz -C ./helm --strip-components=1
                """
            }
         }
        catch (err) {
            echo "FATAL: Helm failed to install"
            currentBuild.result = 'UNSTABLE'
            throw err
        }
        
        try {
            stage ('Package Helm Charts'){                  
                charts = readFile('charts.txt').trim()
                echo "Charts found to be packaged: " + charts

                // We need to initialize Helm and add the Decipher repo since Grey Matter using the remote charts as dependencies
                withCredentials([usernamePassword(credentialsId: 'jenkins-nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        ./helm/helm init --client-only
                        ./helm/helm repo add decipher https://nexus.production.deciphernow.com/repository/helm-hosted/ --username ${USERNAME} --password ${PASSWORD}
                    """
                }
                // Loop over the charts that be packaged
                for (chart in charts.split()) {
                    sh """
                        echo "Packaging: ${chart}"
                        ./helm/helm dependency update ${chart}
                        ./helm/helm package ${chart}
                    """
                }
            }
        }
        catch (err) {
            echo "FATAL: Helm failed to package a chart: " + err
            currentBuild.result = 'UNSTABLE'
            throw err
        }
            
        branch = sh(returnStdout: true, script: "git rev-parse HEAD | git branch -a --contains | grep remotes | sed s/.*remotes.origin.//").trim()
        if ( branch == 'master' ){
            stage ('Publish Charts') { 
                Find all of the charts that were created, known by the *.tgz file extension.  Then upload them to Nexus
                withCredentials([usernamePassword(credentialsId: 'jenkins-nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh '''#!/bin/bash
                            toPublish=($(ls *.tgz))
                            for pubChart in ${toPublish[@]}; do
                                curl -u ${USERNAME}:${PASSWORD} https://nexus.production.deciphernow.com/repository/helm-hosted/ -T $pubChart
                            done
                        '''
                }
            }
        }
        
    }
    catch (e) {
        echo "Caught: ${e}"
        currentBuild.result = 'FAILURE'
        throw e
    }     
        
}
