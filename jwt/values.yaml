global:
  environment: kubernetes
  domain:
  route_url_name:
  remove_namespace_from_url: ''
  exhibitor:
    replicas: 1
  xds:
    port: 18000
    cluster: greymatter
  jwt:
    version: 0.2.0

jwt:
  version: '{{ .Values.global.jwt.version }}'
  image: 'docker.production.deciphernow.com/deciphernow/gm-jwt-security:{{ tpl $.Values.jwt.version $ }}'
  #redis_host: redis.greymatter.svc.cluster.local
  command: ['/bin/sh']
  args:
    [
      '-c',
      'if [[ ! -d ./certs ]]; then mkdir -p ./certs; fi && if [[ ! -d ./etc ]]; then mkdir -p ./certs; fi && /gm-jwt-security/gm-jwt-security',
    ]
  redis_db: '0'
  redis_pass: redis
  egress_use_tls: 'true'
  users_mount_point: /gm-jwt-security/etc
  certs_mount_point: /gm-jwt-security/certs
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 64Mi

  envvars:
    - type: value
      name: HTTP_PORT
      value: '3000'
    - type: secret
      name: PRIVATE_KEY
      secret: jwt-security
      key: jwt.key
    - type: secret
      name: JWT_API_KEY
      secret: jwt-security
      key: jwt.api_key
    - type: value
      name: ENABLE_TLS
      value: false
    - type: value
      name: ZEROLOG_LEVEL
      value: info

  secrets:
    - name: jwt-certs
      jwt.cert.pem: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      jwt.key.pem: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      jwt.trust.pem: |-
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
      server.cert.pem: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      server.key.pem: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      server.trust.pem: |-
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
    - name: jwt-security
      jwt.key: |-
        -----BEGIN EC PRIVATE KEY-----
        ...
        -----END EC PRIVATE KEY-----
      jwt.pub: -----BEGIN PUBLIC KEY-----
        ...
        -----END PUBLIC KEY-----
      jwt.api_key: c2tpcGphY2stc2x1bmstc3VzcGVjdC1pc3JhZWwtc2NyYXA=

  # Sets thee default configMap name from jwt-users
  users_cg_name: jwt-users
  # A JSON list of users that will be permited access to JWT
  users: |-
    {
      "users": [
      {
      "label": "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
      "values": {
          "email": [
              "quickstart@deciphernow.com"
          ],
          "org": [
              "www.deciphernow.com"
          ],
          "privilege": [
              "root"
          ]
          }
      }]
    }

redis:
  # Sets the name of the redis components to be deployed. (deployment, service)
  name: redis
  secret_name: redis-password
  password: 'redis'
  openshift:
    image: 'centos/redis-32-centos7'
  k8s:
    image: 'redis:3.2'
  replica_count: 1
  imagePullPolicy: IfNotPresent
  #private_image: false
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 128Mi

sidecar:
  version: '{{- $.Values.global.jwt.sidecar.version | default $.Values.global.sidecar.version }}'
  image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'jwt-security'

  # Set this to true if you are attempting to deploy xDS by itself.
  # Ideally, xDS is deployed as a dependency to Grey Matter, which creates the
  # sidecar secret, but if individual testing is being done, the sidecar secret will
  # need to be created.
  create_sidecar_secret: false
  secrets:
    name: sidecar
    ca: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    cert: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    key: |-
      -----BEGIN RSA PRIVATE KEY-----
      ...
      -----END RSA PRIVATE KEY-----
