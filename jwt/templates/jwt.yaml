kind: Deployment
apiVersion: extensions/v1beta1
metadata:
    name: {{ .Values.jwt.name | default "jwt-security"  }}
    namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.global.exhibitor.replicas | default 1 }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.jwt.name | default "jwt-security"  }}
      deployment: {{ .Values.jwt.name | default "jwt-security"  }}
  template:
    metadata:
      labels:
        app: {{ .Values.jwt.name | default "jwt-security"  }}
        deployment: {{ .Values.jwt.name | default "jwt-security"  }}
    spec:
      containers:
      - name: jwt-security
        image: {{ tpl .Values.jwt.image $ | quote }}
        imagePullPolicy: {{ .Values.jwt.imagePullPolicy }}
        {{- if .Values.jwt.resources }}
        resources:
{{ toYaml .Values.jwt.resources | indent 10 }}
        {{- end }}
        {{- if .Values.jwt.command }}
        command:
{{ toYaml .Values.jwt.command | indent 8 }}
        args:
{{ toYaml .Values.jwt.args | indent 8 }}
        {{- end }}

        env:
      {{- range $envvar := .Values.jwt.envvars }}
      {{- $envName := $envvar.name | upper | replace "." "_" | replace "-" "_" }}
        {{- if eq $envvar.type "secret" }}
        - name: {{ $envName }}
          valueFrom:
            secretKeyRef:
              name: {{ $envvar.secret }}
              key: {{ $envvar.key }}
        {{- else if eq $envvar.type "value" }}
        - name: {{ $envName }}
          value: {{ $envvar.value | quote }}
        {{- end }}
      {{- end  }}   
        - name: REDIS_HOST
          value: {{ .Values.redis.name }}.{{ .Release.Namespace }}.svc.cluster.local
        - name:  REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: {{ .Values.jwt.redis_db | quote }}
        - name: REDIS_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.redis.secret_name }}
              key: password
        volumeMounts:
        - name: jwt-users
          mountPath: {{ .Values.jwt.users_mount_point }}
      
      - name: sidecar
        image: {{ tpl .Values.sidecar.image $ | quote }}
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy }}
        env:
        {{- include "greymatter.envvars" . | indent 8 }}
        {{- if .Values.sidecar.resources }}
        resources:
{{ toYaml .Values.sidecar.resources | indent 10 }}
        {{- end }}
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        {{- if .Values.global.spire.enabled }}
        volumeMounts:
        {{- include "sidecar_volume_mounts" . | indent 8 }}
        {{- else if and (not .Values.global.spire.enabled) (.Values.global.mesh_tls.use_provided_certs) }}
        volumeMounts:
        {{- include "sidecar_volume_certs_mount" . | indent 8 }}
        {{- end }}
      {{- if .Values.global.consul.enabled }}
      - name: consul
        image: consul:1.5.0
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NAME
          value: {{ .Values.jwt.name | default "jwt-security"  }}
        command: ["/bin/sh", "-ec"]
        args: 
          - "echo '{
            \"Service\": {
                \"name\":\"$(NAME)\",
                \"address\": \"$(POD_IP)\",
                \"port\": {{ .Values.global.services.edge.port }},
                \"tags\": [\"tbn-cluster\"],
                \"meta\": {
                    \"metrics\": \"8081\"
                    },
                \"check\": [
                    {
                      \"name\": \"$(NAME) health check\",
                      \"tcp\": \"$(POD_IP):{{ .Values.global.services.edge.port }}\",
                      \"interval\": \"10s\"
                    }
                  ]
                }}' > /consul/config/$(NAME)-con.json \
              && exec /bin/consul agent \
                -data-dir=/consul/data \
                -advertise=\"$(POD_IP)\" \
                -retry-join=\"{{ .Values.global.consul.host }}\" \
                -config-dir=/consul/config"
        volumeMounts:
        - name: data-consul
          mountPath: /consul/data
      {{- end }}
      imagePullSecrets:
        - name: docker.secret
      volumes:
      {{- if .Values.global.spire.enabled }}
      {{- include "sidecar_volumes" . | indent 6 }}
      {{- else if and (not .Values.global.spire.enabled) (.Values.global.mesh_tls.use_provided_certs) }}
      volumes:
      {{- include "sidecar_certs_volumes" . | indent 6 }}
      {{- end }}
      - name: jwt-users
        configMap:
          name: {{ .Values.jwt.users_cg_name }}
      {{- if .Values.global.consul.enabled }}
      - name: data-consul
        emptyDir: {}
      {{- end }}
