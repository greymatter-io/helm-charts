environment:

slo:
  version: 0.4.0
  image: docker.production.deciphernow.com/deciphernow/gm-slo:0.4.0
  imagePullPolicy: Always
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

sidecar:
  version: 0.7.1
  image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:0.7.1'
  proxy_dynamic: 'true'
  metrics_key_function: depth
  ingress_use_tls: 'true'
  imagePullPolicy: Always
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Set this to true if you are attempting to deploy SLO by itself.
  # Ideally, catalog is deployed as a dependency to Grey Matter, which creates the
  # sidecar secret, but if individual testing is being done, the sidecar secret will
  # need to be created.
  create_sidecar_secret: false
  certificates:
    # name: sidecar
    # ca: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # cert: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # key: |-
    #   -----BEGIN RSA PRIVATE KEY-----
    #   ...
    #   -----END RSA PRIVATE KEY-----
xds:
  port: 18000
  cluster: greymatter

postgres:
  data_mount_point: /var/lib/pgsql/data
  openshift:
    image: 'docker.io/centos/postgresql-95-centos7:9.5'
  k8s:
    image: 'postgres:9.5'
  imagePullPolicy: Always
  replica_count: 1
  #private_image: false
  resources:
    limits:
     cpu: 200m
     memory: 512Mi
    requests:
     cpu: 100m
     memory: 128Mi


  credentials:
    secret_name: postgres-credentials
    username: greymatter
    password: greymatter
    database: greymatter

  ssl:
    enabled: false
    name: postgres-ssl-certs
    mount_path: /secret/cert
    certificates:
  #  - name: mongo-ssl-certs
  #    ca: |-
  #      -----BEGIN CERTIFICATE-----
  #      ...
  #      -----END CERTIFICATE-----
  #    cert: |-
  #      -----BEGIN CERTIFICATE-----
  #      ...
  #      -----END CERTIFICATE-----
  #    key: |-
  #      -----BEGIN RSA PRIVATE KEY-----
  #      ...
  #      -----END RSA PRIVATE KEY-----

  envvars:
    # Any environments listed here will be populated in the postgres yaml. Use the
    # correct variables for the version of Postgres you are deploying
    #
    # Formerly, when .Values.environment was set to "openshift", these environment variables were used:
    #   - POSTGRESQL_USER
    #   - POSTGRESQL_PASSWORD
    #   - POSTGRESQL_DATABASE
    # When .Values.environment was set to "kubernetes", these were used:
    #   - POSTGRES_USER
    #   - POSTGRES_PASSWORD
    #   - POSTGRES_DB
    - type: secret
      name: POSTGRESQL_USER
      secret: postgres-credentials
      key: username
    - type: secret
      name: POSTGRESQL_PASSWORD
      secret: postgres-credentials
      key: password
    - type: secret
      name: POSTGRESQL_DATABASE
      secret: postgres-credentials
      key: database

exhibitor:
  replicas: 1
