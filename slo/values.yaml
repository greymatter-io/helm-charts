global:
  environment: kubernetes
  domain:
  route_url_name:
  remove_namespace_from_url: ''
  exhibitor:
    replicas: 1
  xds:
    port: 18000
    cluster: greymatter
  waiter:
    image: deciphernow/k8s-waiter:latest

slo:
  version: 1.0.0
  image: docker.production.deciphernow.com/deciphernow/gm-slo:1.0.0
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

sidecar:
  version: '{{- $.Values.global.slo.sidecar.version | default $.Values.global.sidecar.version }}'
  image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  metrics_key_function: depth
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'slo'

  # Set this to true if you are attempting to deploy SLO by itself.
  # Ideally, catalog is deployed as a dependency to Grey Matter, which creates the
  # sidecar secret, but if individual testing is being done, the sidecar secret will
  # need to be created.
  create_sidecar_secret: false
  certificates:
    # name: sidecar
    # ca: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # cert: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # key: |-
    #   -----BEGIN RSA PRIVATE KEY-----
    #   ...
    #   -----END RSA PRIVATE KEY-----

postgres:
  data_mount_point: /var/lib/pgsql/data
  openshift:
    image: 'docker.io/centos/postgresql-10-centos7'
  k8s:
    image: 'docker.io/centos/postgresql-10-centos7'
  imagePullPolicy: IfNotPresent
  replica_count: 1
  #private_image: false
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  confMountPoint: /conf
  # This override is unique to OpenShift's postgresql container
  # https://github.com/sclorg/postgresql-container/tree/master/examples/custom-config
  overridesMountPoint: /opt/app-root/src/postgresql-cfg

  credentials:
    secret_name: postgres-credentials
    username: greymatter
    password: greymatter
    database: greymatter

  ssl:
    enabled: false
    name: postgres-ssl-certs
    mountPoint: /certs
    certificates:
      # This sets a default file name for the Postgres CA.  Can be overridden to change the filename
      caName: ca.pem
      ca: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      # This sets a default file name for the Postgres SSL Cert.  Can be overridden to change the filename
      certName: server.crt
      cert: |-
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      # This sets a default file name for the Postgres SSL Key.  Can be overridden to change the filename
      keyName: server.key
      key: |-
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----

  envvars:
    # Any environments listed here will be populated in the postgres yaml. Use the
    # correct variables for the version of Postgres you are deploying
    #
    # Formerly, when .Values.global.environment was set to "openshift", these environment variables were used:
    #   - POSTGRESQL_USER
    #   - POSTGRESQL_PASSWORD
    #   - POSTGRESQL_DATABASE
    # When .Values.global.environment was set to "kubernetes", these were used:
    #   - POSTGRES_USER
    #   - POSTGRES_PASSWORD
    #   - POSTGRES_DB
    # Now, helm automatically chooses the correct environment variable based on the environment value.
    - type: secret
      name: '{{ ternary "POSTGRESQL_USER" "POSTGRES_USER" (eq .Values.global.environment "openshift") }}'
      secret: postgres-credentials
      key: username
    - type: secret
      name:  '{{ ternary "POSTGRESQL_PASSWORD" "POSTGRES_PASSWORD" (eq .Values.global.environment "openshift") }}'
      secret: postgres-credentials
      key: password
    - type: secret
      name: '{{ ternary "POSTGRESQL_DATABASE" "POSTGRES_DB" (eq .Values.global.environment "openshift") }}'
      secret: postgres-credentials
      key: database