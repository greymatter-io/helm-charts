# Grey Matter Control API Defaults

global:
  image_pull_secret: docker.secret    # Used as imagePullSecrets value for each subchart
  environment: openshift              # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  zone: zone-default-zone             # Used to configure control and control-api environment variables
  consul:                             # Whether to use consul for service discovery
    enabled: false
    host: ''
    port: 8500
  waiter:                             # Configures the init container used to wait on various deployments to be ready
    image: deciphernow/k8s-waiter:latest
    serviceAccount: 
      create: true
      name: waiter-sa
      
controlApi:
  name: control-api                   # Name used for the deployment and service resources
  displayName: control-api            # Display name used for NOTES.txt
  replicas: 1                         # Number of replicas for the deployment
  version: latest
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-control-api:{{ .Values.controlApi.version }}'
  imagePullPolicy: IfNotPresent       # When to pull images, used in the deployment
  containerPort: 5555                 # Port exposed by the control-api container
  proxyPort: 8080                     # Port expose by the GM sidecar container
  pvcMountPoint: '/app/control-api/data/backend.json' # Location for the control-api's configuration store
  secret:
    enabled: true
    secret_name: controlapitls
    mountPoint: /service-certs
    secretKeys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  envvars:
    gm_control_api_use_tls:
      type: 'value'
      value: "{{ .Values.controlApi.secret.enabled }}"
    gm_control_api_ca_cert_path:
      type: 'value'
      value: "{{ .Values.controlApi.secret.mountPoint}}/{{ .Values.controlApi.secret.secretKeys.ca }}"
    gm_control_api_server_cert_path:
      type: 'value'
      value: "{{ .Values.controlApi.secret.mountPoint}}/{{ .Values.controlApi.secret.secretKeys.cert }}"
    gm_control_api_server_key_path:
      type: 'value'
      value: "{{ .Values.controlApi.secret.mountPoint}}/{{ .Values.controlApi.secret.secretKeys.key }}"
    gm_control_api_log_level:
      type: 'value'
      value: 'debug'
    gm_control_api_address:
      type: 'value'
      value: '0.0.0.0:5555'
    gm_control_api_org_key:
      type: 'value'
      value: 'deciphernow'
    gm_control_api_zone_key:
      type: 'value'
      value: '{{ .Values.global.zone }}'
    gm_control_api_zone_name:
      type: 'value'
      value: '{{ .Values.global.zone }}'
    gm_control_api_persister_type:
      type: value
      value: 'file'
    gm_control_api_persister_path:
      type: value
      value: '{{ .Values.controlApi.pvcMountPoint }}'
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, and adjust them as necessary.
    # limits:
    #   cpu: 500m
    #   memory: 1Gi
    # requests:
    #   cpu: 250m
    #   memory: 256Mi
  pvc:
    size: 1Gi

sidecar:
  version: latest
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'control-api'
    proxy_dynamic:
      type: 'value'
      value: 'true'
    xds_zone:
      type: 'value'
      value: '{{ .Values.global.zone }}'
    xds_host:
      type: 'value'
      value: 'control.{{ .Release.Namespace }}.svc'
    xds_port:
      type: 'value'
      value: '50000'
    xds_node_id:
      type: 'value'
      value: 'default'
    envoy_admin_log_path:
      type: 'value'
      value: '/dev/stdout'
  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/proxy/tls/sidecar
    secretKeys:
      ca: ca.crt
      cert: server.crt
      key: server.key    
