# Grey Matter JWT Gov Security Defaults

global:
  # Used as imagePullSecrets value for each subchart
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  environment: openshift
  exhibitor:
    replicas: 1
  # Port for Grey Matter Control. Used in sidecar envvars
  control_port: 50000
  # Zone for Grey Matter objects. Used in sidecar envvars
  zone: zone-default-zone
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: false
    trust_domain: quickstart.greymatter.io
  # Whether to register services with Consul and where to find the Consul server
  consul:
    enabled: false
  sidecar:
    version: 1.3.0

jwt:
  version: '1.0.1'
  # If true, uses aac for auth control
  use_aac: false
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-jwt-security-gov:{{ tpl $.Values.jwt.version $ }}'
  command: ['/bin/sh']
  args:
    [
      '-c',
      'if [[ ! -d ./certs ]]; then mkdir -p ./certs; fi && if [[ ! -d ./certs/aac ]]; then mkdir -p ./certs/aac; fi && if [[ ! -d ./etc ]]; then mkdir -p ./certs; fi && /gm-jwt-security-gov/gm-jwt-security-gov',

    ]
  # If set, enables tls using the secret specified in secret_name
  #secret:
  #  secret_name: jwt-certs
  #  mount_point: /gm-jwt-security/certs
  # Location to mount the information specified in users_cg_name in the container
  users_mount_point: /gm-jwt-security-gov/etc
  users_cg_name: jwt-users
  image_pull_policy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 64Mi

  envvars:
    https_port:
      type: value
      value: '3000'
    private_key:
      type: secret
      secret: jwt-security
      key: jwt.key
    jwt_api_key:
      type: secret
      secret: jwt-security
      key: jwt.api_key
    enable_tls:
      type: value
      value: 'true'
    server_trust:
      type: secret
      secret: jwt-certs
      key: jwt.trust.pem
    server_cert:
      type: secret
      secret: jwt-certs
      key: jwt.cert.pem
    server_key:
      type: secret
      secret: jwt-certs
      key: jwt.key.pem
    zerolog_level:
      type: value
      value: 'info'
    token_exp_time:
      type: value
      value: '300'
    redis_port:
      type: value
      value: "6379"
    redis_db:
      type: value
      value: "0"
    redis_host:
      type: value
      value: '{{ .Values.redis.name }}.{{ .Release.Namespace }}.svc'
    redis_pass:
      type: secret
      secret: '{{ .Values.redis.secret.secret_name | default "redis-password" }}'
      key: password
    demo_mode:
      type: value
      value: '{{- if .Values.jwt.use_aac }}false{{- else }}true{{- end }}'

  # Provides a list of authorized users for the JWT service
  users: |-
    [
      {
          "userDN": "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
          "diasUserGroups": {
              "projects": [
                  {}
              ]
          },
          "whitePageAttributes": {
              "firstName": "quick",
              "surName": "start",
              "uid": "",
              "companyName": "",
              "telephoneNumber": "123-123-1234 1234",
              "icEMail": "quickstart@ic.com",
              "siprnetEmail": "quickstart@sipr.com",
              "niprnetEmail": "quickstart@nipr.com"
          },
          "userClearance": {
              "clearance": "U",
              "clearanceRank": 0,
              "citizenship": "USA",
              "formalAccess": []
          },
          "gimmeeAttributes": {
              "organization": "",
              "topic": [],
              "region": [],
              "groups": [],
              "isAICP": false,
              "communityType": null,
              "organizationalPath": null
          },
          "localUserGroups": {
              "projects": []
          },
          "nShare": {},
          "status": "SUCCESS",
          "f_macs": {
              "negate": [
              ],
              "as_is": []
          },
          "f_oc_org": {
              "as_is": []
          },
          "f_accms": {
              "negate": [
              ],
              "as_is": []
          },
          "f_clearance": {
              "as_is": [
                  "u"
              ]
          },
          "f_regions": {
              "as_is": []
          },
          "f_missions": {
              "as_is": []
          },
          "f_share": {
              "as_is": [ 
              ]
          },
          "f_sci_ctrls": {
              "negate": [
              ],
              "as_is": []
          }
      }
    ]

  # A JSON list of users that will be permited admin access to JWT
  admins: |-
    [
      "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US"
    ]
          

redis:
  # Name used for the redis deployment and service resources
  name: redis
  # The secret containing the password to configure the environment variable REDIS_PASSWORD
  secret:
    secret_name: redis-password
  password: 'redis'
  # Redis image to use when global.environment=openshift
  openshift:
    image: 'centos/redis-32-centos7'
  # Redis image to use when global.environment=kubernetes
  k8s:
    image: 'redis:3.2'
  replica_count: 1
  image_pull_policy: IfNotPresent
  # Uses global.image_pull_secret if true
  private_image: false

# Sets default sidecar configurations for all sidecars
sidecar:
  version: '{{ .Values.global.sidecar.version | default "latest" }}'
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  # If set, enables tls using the secret specified in secret_name
  secret:
    enabled: true
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar/
    secret_keys:
      ca: ca.crt
      key: server.key
      cert: server.crt
  image: 'docker.io/deciphernow/gm-proxy:test'
  image_pull_policy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
