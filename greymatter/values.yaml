global:
  environment: kubernetes
  domain:
  route_url_name:
  remove_namespace_from_url: false
  zone: zone-default-zone
  mesh_tls:
    use_provided_certs: false
  catalog:
    name: catalog
    version: 1.0.1
    sidecar:
      version:
  dashboard:
    version: 3.0.0
    sidecar:
      version:
    prometheus_sidecar:
      version: 0.8.0
  data:
    version: 0.2.7
    sidecar:
      version:
    jwt_prefix: '/jwt'
  edge:
    # This enables mTLS on the edge proxy (ingress mTLS)
    enableTLS: true
    version: 0.8.0
    sidecar:
      version:
  jwt:
    version: 0.2.0
    sidecar:
      version:
  slo:
    version: 0.5.0
    sidecar:
      version:
  control:
    version: 0.3.0
    # This specifies the service name that all XDS clients will try to connect to
    name: control
    port: 50000
  gmControlApi:
    version: 0.7.0
    cli:
      version: 0.4.0
  sidecar:
    version: 0.8.1
  spire:
    enabled: false
    trustDomain: deciphernow.com
  # The waiter serviceaccount is used by multiple services to wait on other services. It uses the readiness checks and kubernetes API
  waiter:
    serviceAccount:
      create: true
      name: waiter-sa
  services:
    catalog:
      catalogEnabled: true
      controlEnabled: true
      serviceName: 'catalog'
      zone: 'zone-default-zone'
      port: 9080
      enableInstanceMetrics: 'true'
      capability: 'Grey Matter'
      documentation: '/services/catalog/latest/'
      name: 'Grey Matter Catalog'
      owner: 'Decipher'
      version: 1.0.1
      minInstances: 1
      maxInstances: 1
      # egressTLS: 'false'
      routes:
        - '/services/catalog/{{ $.Values.global.catalog.version }}'
        - '/services/catalog/{{ $.Values.global.catalog.version }}/'

    # control:
    #   name: 'Grey Matter Control'
    #   serviceName: 'control'
    #   routes:
        # - '/services/xds/{{ $.Values.global.xds.version }}'
        # - '/services/xds/{{ $.Values.global.xds.version }}'

    dashboard:
      catalogEnabled: true
      controlEnabled: true
      name: 'Grey Matter Dashboard'
      serviceName: 'dashboard'
      zone: zone-default-zone
      port: 1337
      enableInstanceMetrics: "true" 
      capability: 'Grey Matter'
      documentation: ''
      name: 'Grey Matter Dashboard'
      owner: 'Decipher'
      version: 3.1.0
      # egressTLS: 'false'
      routes:
        - '/services/dashboard/latest'
        - '/services/dashboard/latest/'
    
    prometheus:
      catalogEnabled: false
      controlEnabled: true
      name: 'Prometheus'
      serviceName: 'prometheus'
      port: 9090
      # egressTLS: 'false'

    data:
      catalogEnabled: true
      controlEnabled: true
      name: 'Grey Matter Data'
      zone: zone-default-zone
      serviceName: 'data'
      port: 8181
      enableInstanceMetrics: "true" 
      capability: 'Grey Matter'
      documentation: '/services/data/latest/static/ui/index.html'
      name: 'Grey Matter Data'
      owner: 'Decipher'
      version: 0.2.7   
      # egressTLS: 'true'
      routes:
        - '/services/data/{{ $.Values.global.data.version }}'
        - '/services/data/{{ $.Values.global.data.version }}/'

    jwt:
      catalogEnabled: true
      controlEnabled: true
      name: 'Grey Matter JWT Security'
      serviceName: 'jwt-security'
      zone: zone-default-zone
      port: 3000
      # egressTLS: 'true'
      enableInstanceMetrics: 'true'
      capability: 'Grey Matter'
      documentation: ''
      name: 'Grey Matter JWT Security'
      owner: 'Decipher'
      version: '0.2.0'
      routes:
        - '/services/jwt-security/{{ $.Values.global.jwt.version }}'
        - '/services/jwt-security/{{ $.Values.global.jwt.version }}/'

    controlApi:
      catalogEnabled: true
      controlEnabled: true
      name: 'Grey Matter Control API'
      serviceName: 'gm-control-api'
      zone: zone-default-zone
      port: 5555
      enableInstanceMetrics: 'true'
      capability: 'Grey Matter'
      documentation:
      name: 'Grey Matter Control API'
      owner: 'Decipher'
      version: '0.3.1'
      routes:
        - '/services/control-api/{{ $.Values.global.control.version }}'
        - '/services/control-api/{{ $.Values.global.control.version }}/'

    edge:
      catalogEnabled: true
      controlEnabled: false
      name: 'Grey Matter Edge'
      serviceName: 'edge'
      zone: zone-default-zone
      port: 8080
      # We use a static cert on the edge listener
      removeListenerSecret: true
      enableInstanceMetrics: 'true'
      capability: 'Grey Matter'
      documentatio: ''
      name: "Grey Matter Edge"
      owner: 'Decipher'
      version: '0.8.1'

    slo:
      catalogEnabled: true
      controlEnabled: true
      name: 'Grey Matter Service Level Objectives'
      serviceName: 'slo'
      zone: zone-default-zone
      port: 1337
      # egressTLS: 'false'
      enableInstanceMetrics: 'true'
      capability: 'Grey Matter'
      documentation:
      name: 'Grey Matter Service Level Objectives'
      owner: 'Decipher'
      version: '0.5.0'
      routes:
        - '/services/slo/{{ $.Values.global.slo.version }}'
        - '/services/slo/{{ $.Values.global.slo.version }}/'

    # documentation:
    #   name: 'Grey Matter Documentation'
    #   serviceName: 'documentation'
    #   port: 8090
    #   routes:
    #     - '/services/documentation/{{ $.Values.global.documentation.version }}'
    #     - '/services/documentation/{{ $.Values.global.documentation.version }}/'

  # All of the mesh-wide environment variables should be set in your `custom.yaml` file

sidecar:
  # Set this to true if you are attempting to deploy Catalog by itself.
  # Ideally, catalog is deployed as a dependency to Grey Matter, which creates the
  # sidecar secret, but if individual testing is being done, the sidecar secret will
  # need to be created.
  create_sidecar_secret: true
  certificates:
    name: sidecar
    ca: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    cert: |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    key: |-
      -----BEGIN RSA PRIVATE KEY-----
      ...
      -----END RSA PRIVATE KEY-----
