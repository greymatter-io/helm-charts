version: 2.1

orbs:
  slack: circleci/slack@4.0

defaults: &defaults
  machine: true
  working_directory: ~/helm-charts

slack-fail-post-step: &slack-fail-post-steps
  context: SLACK
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1

slack-notify: &slack-notify
  context: SLACK
  post-steps:
    - slack/notify:
        event: fail
        template: basic_fail_1
    - slack/notify:
        event: pass
        template: success_tagged_deploy_1

jobs:
  lint-edge-secrets:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Lint Edge and Secrets
          command: |
            ls -al ~
            ls -al ~/helm-charts/
            docker run --rm -v $(pwd):/helm-charts/ -w /helm-charts quay.io/helmpack/chart-testing:v3.1.1 ct lint --config /helm-charts/.chart-testing/edge-secrets.yaml

  lint-services:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Lint Services
          command: |
            ls -al ~
            ls -al ~/helm-charts/
            docker run --rm -v $(pwd):/helm-charts/ -w /helm-charts quay.io/helmpack/chart-testing:v3.1.1 ct lint --config /helm-charts/.chart-testing/services.yaml
  lint-fabric-sense:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Lint Fabric, Sense and Data
          command: |
            ls -al ~
            ls -al ~/helm-charts/
            docker run --rm -v $(pwd):/helm-charts/ -w /helm-charts quay.io/helmpack/chart-testing:v3.1.1 ct lint --config /helm-charts/.chart-testing/fabric-sense-data.yaml
  package-development:
    machine: true
    steps:
      - checkout
      - run:
          name: Set Environment Variable
          command: |
            echo "export NEXUS_URL=https://nexus.greymatter.io/repository/helm-development" >> $BASH_ENV
            echo "export DOCKER_IMAGE=deciphernow/helm-packager:3.2.4-1" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Package and Publish Catalog
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/catalog
      - run:
          name: Package and Publish Control
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/control
      - run:
          name: Package and Publish Data
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/data/gm-data
      - run:
          name: Package and Publish GM Control API
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/control-api
      - run:
          name: Package and Publish Redis
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/redis
      - run:
          name: Package and Publish Dashboard
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/dashboard
      - run:
          name: Package and Publish JWT
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/jwt
      - run:
          name: Package and Publish JWT Gov
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/jwt-gov
      - run:
          name: Package and Publish Edge
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/edge
      - run:
          name: Package and Publish SLO
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/slo
      - run:
          name: Package and Publish Spire Server
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire/server
      - run:
          name: Package and Publish Spire Agent
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire/agent
      - run:
          name: Package and Publish Secrets
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/secrets
  package-and-publish-greymatter-development:
    machine: true
    steps:
      - checkout
      - run:
          name: Set Environment Variable
          command: |
            echo "export NEXUS_URL=https://nexus.greymatter.io/repository/helm-development" >> $BASH_ENV
            echo "export DOCKER_IMAGE=deciphernow/helm-packager:3.2.4-1" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Change Grey Matter (fabric, sense, data, spire, secrets) Requirements from local to helm development
          command: |
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/fabric/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/sense/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/data/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/spire/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/secrets/Chart.yaml
      - run:
          name: Print directory listing
          command: |
            ls -al $(pwd)
      - run:
          name: Package and Publish Fabric
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric
      - run:
          name: Package and Publish Fabric-gov
          command: |
            cp $(pwd)/fabric/Chart.yaml $(pwd)/fabric/Chart.yaml.orig
            echo "$(awk 'NR==1,/name: jwt/{sub(/name: jwt/, "name: jwt-gov")} 1' fabric/Chart.yaml)" > fabric/Chart.yaml
            sed -i.bak-gov -e "s|name: fabric|name: fabric-gov|" -e "s|Grey Matter Fabric|Grey Matter Fabric-gov|" $(pwd)/fabric/Chart.yaml
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric
            mv $(pwd)/fabric/Chart.yaml.orig $(pwd)/fabric/Chart.yaml
      - run:
          name: Package and Publish Sense
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense
      - run:
          name: Package and Publish Data
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/data
      - run:
          name: Package and Publish Edge
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/edge
      - run:
          name: Package and Publish Spire
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire
      - run:
          name: Package and Publish Secrets
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/secrets
      - run:
          name: Revert SED
          command: |
            mv $(pwd)/fabric/Chart.yaml.bak $(pwd)/fabric/Chart.yaml
            mv $(pwd)/sense/Chart.yaml.bak $(pwd)/sense/Chart.yaml
            mv $(pwd)/data/Chart.yaml.bak $(pwd)/data/Chart.yaml
            mv $(pwd)/spire/Chart.yaml.bak $(pwd)/spire/Chart.yaml
            mv $(pwd)/secrets/Chart.yaml.bak $(pwd)/secrets/Chart.yaml
  package-and-publish-core-release:
    machine: true
    steps:
      - checkout
      - run:
          name: Set Environment Variable
          command: |
            echo "export NEXUS_URL=https://nexus.greymatter.io/repository/helm-release" >> $BASH_ENV
            echo "export DOCKER_IMAGE=deciphernow/helm-packager:3.2.4-1" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Package and Publish Catalog
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/catalog
      - run:
          name: Package and Publish Control
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/control
      - run:
          name: Package and Publish Data
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/data/gm-data
      - run:
          name: Package and Publish GM Control API
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/control-api
      - run:
          name: Package and Publish Redis
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/redis
      - run:
          name: Package and Publish Dashboard
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/dashboard
      - run:
          name: Package and Publish JWT
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/jwt
      - run:
          name: Package and Publish JWT Gov
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric/jwt-gov
      - run:
          name: Package and Publish Edge
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/edge
      - run:
          name: Package and Publish SLO
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense/slo
      - run:
          name: Package and Publish Spire Server
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire/server
      - run:
          name: Package and Publish Spire Agent
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire/agent
      - run:
          name: Package and Publish Secrets
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/secrets
  package-and-publish-greymatter-release:
    machine: true
    steps:
      - checkout
      - run:
          name: Set Environment Variable
          command: |
            echo "export NEXUS_URL=https://nexus.greymatter.io/repository/helm-release" >> $BASH_ENV
            echo "export DOCKER_IMAGE=deciphernow/helm-packager:3.2.4-1" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Change Grey Matter (fabric, sense, data, spire) Requirements from local to helm release
          command: |
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/fabric/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/sense/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/data/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/spire/Chart.yaml
            sed -i.bak -e "s|file:.*|$NEXUS_URL|" $(pwd)/secrets/Chart.yaml
      - run:
          name: Package and Publish Fabric
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric
      - run:
          name: Package and Publish Fabric-gov
          command: |
            cp $(pwd)/fabric/Chart.yaml $(pwd)/fabric/Chart.yaml.orig
            echo "$(awk 'NR==1,/name: jwt/{sub(/name: jwt/, "name: jwt-gov")} 1' fabric/Chart.yaml)" > fabric/Chart.yaml
            sed -i.bak-gov -e "s|name: fabric|name: fabric-gov|" -e "s|Grey Matter Fabric|Grey Matter Fabric-gov|" $(pwd)/fabric/Chart.yaml
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/fabric
            mv $(pwd)/fabric/Chart.yaml.orig $(pwd)/fabric/Chart.yaml
      - run:
          name: Package and Publish Sense
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/sense
      - run:
          name: Package and Publish Data
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/data
      - run:
          name: Package and Publish Edge
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/edge
      - run:
          name: Package and Publish Spire
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/spire
      - run:
          name: Package and Publish Secrets
          command: |
            docker run --rm -e INPUT_NEXUS_URL=$NEXUS_URL -e INPUT_NEXUS_USER=$NEXUS_USER -e INPUT_NEXUS_PASS=$NEXUS_PASSWORD -v $(pwd):/helm ${DOCKER_IMAGE} /helm/secrets


  greymatter-test:
    machine: true
    steps:
      - checkout
      - run:
          name: Set up K3d, Kubectl and Helm
          command: |
            # remove the old go
            sudo rm -rf /usr/local/go

            # upgrade go
            wget https://golang.org/dl/go1.14.7.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.14.7.linux-amd64.tar.gz

            # get and start k3d
            wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
            k3d cluster create greymatter -a 4 -p 30000:10808@loadbalancer --wait
            export KUBECONFIG=$(k3d kubeconfig write greymatter)

            # get kubectl
            wget "https://storage.googleapis.com/kubernetes-release/release/v1.18.3/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv kubectl /usr/local/

            # get helm
            wget "https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz"
            tar -xvf helm-v3.2.4-linux-amd64.tar.gz
            chmod +s linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/

            # add the local dir to our path so we can run the helm and kubectl we just downloaded
            export PATH=$PATH:/usr/local/go/bin:/usr/local

            # set the credentials
            cp ./ci/scripts/credentials.template ./credentials.yaml
            printf '%s\n' $NEXUS_USER $NEXUS_PASSWORD n | ./ci/scripts/build-credentials.sh

            # add the secrets
            make secrets

            # execute a test
            cd test
            go mod vendor
            go test -v greymatter_integration_test.go

workflows:
  version: 2
  workflow:
    jobs:
      - lint-edge-secrets:
          <<: *slack-fail-post-steps
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - lint-services:
          <<: *slack-fail-post-steps
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - lint-fabric-sense:
          <<: *slack-fail-post-steps
          requires:
            - lint-edge-secrets
            - lint-services
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - greymatter-test:
          <<: *slack-fail-post-steps
          requires:
            - lint-fabric-sense
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /release-.*/
      - package-development:
          <<: *slack-fail-post-steps
          context:
            - nexus
          requires:
            - lint-fabric-sense
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /release-.*/
      - package-and-publish-greymatter-development:
          <<: *slack-fail-post-steps
          context:
            - nexus
          requires:
            - package-development
      - package-and-publish-core-release:
          <<: *slack-fail-post-steps
          context:
            - nexus
          requires:
            - greymatter-test
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore: /release-2.3/
              only: /release-.*/
      - package-and-publish-greymatter-release:
          <<: *slack-notify
          context:
            - nexus
          requires:
            - package-and-publish-core-release
