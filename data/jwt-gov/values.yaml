global:

  imagePullSecret: docker.secret

  environment: kubernetes
  domain:
  route_url_name:
  remove_namespace_from_url: ''
  exhibitor:
    replicas: 1
  xds:
    port: 18000
    cluster: greymatter
  jwt:
    version: 1.0.0
    sidecar:
      version: latest
  sidecar:
    version: latest
  spire:
    enabled: false
  mesh_tls:
    use_provided_certs: true

jwt:
  version: '{{ tpl $.Values.global.jwt.version $ }}'
  use_aac: true # when deploying the jwt-gov version, this should be set to 'true' if you want jwt to use aac for auth control
  image: 'docker.production.deciphernow.com/deciphernow/gm-jwt-security-gov:{{ tpl $.Values.jwt.version $ }}'
  command: ['/bin/sh']
  args:
    [
      '-c',
      'if [[ ! -d ./certs ]]; then mkdir -p ./certs; fi && if [[ ! -d ./certs/aac ]]; then mkdir -p ./certs/aac; fi && if [[ ! -d ./etc ]]; then mkdir -p ./certs; fi && /app/gm-jwt-security-gov.linux',

    ]
  redis_db: '0'
  redis_pass: redis
  egress_use_tls: 'true'
  users_mount_point: /gm-jwt-security/etc
  certs_mount_point: /gm-jwt-security/certs
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 64Mi

  envvars:
    - type: value
      name: HTTPS_PORT
      value: '3000'
    - type: secret
      name: PRIVATE_KEY
      secret: jwt-security
      key: jwt.key
    - type: secret
      name: JWT_API_KEY
      secret: jwt-security
      key: jwt.api_key
    - type: value
      name: ENABLE_TLS
      value: true
    - type: secret
      name: SERVER_TRUST
      secret: jwt-certs
      key: jwt.trust.pem
    - type: secret
      name: SERVER_CERT
      secret: jwt-certs
      key: jwt.cert.pem
    - type: secret
      name: SERVER_KEY
      secret: jwt-certs
      key: jwt.key.pem
    - type: value
      name: ZEROLOG_LEVEL
      value: info
    - type: value
      name: TOKEN_EXP_TIME
      value: '300'


  # A JSON list of users and their AOs that will be permited access to JWT
  users: |-
    [
      {
          "userDN": "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
          "diasUserGroups": {
              "projects": [
                  {}
              ]
          },
          "whitePageAttributes": {
              "firstName": "quick",
              "surName": "start",
              "uid": "",
              "companyName": "",
              "telephoneNumber": "123-123-1234 1234",
              "icEMail": "quickstart@ic.com",
              "siprnetEmail": "quickstart@sipr.com",
              "niprnetEmail": "quickstart@nipr.com"
          },
          "userClearance": {
              "clearance": "U",
              "clearanceRank": 0,
              "citizenship": "USA",
              "formalAccess": []
          },
          "gimmeeAttributes": {
              "organization": "",
              "topic": [],
              "region": [],
              "groups": [],
              "isAICP": false,
              "communityType": null,
              "organizationalPath": null
          },
          "localUserGroups": {
              "projects": []
          },
          "nShare": {},
          "status": "SUCCESS",
          "f_macs": {
              "negate": [
              ],
              "as_is": []
          },
          "f_oc_org": {
              "as_is": []
          },
          "f_accms": {
              "negate": [
              ],
              "as_is": []
          },
          "f_clearance": {
              "as_is": [
                  "u"
              ]
          },
          "f_regions": {
              "as_is": []
          },
          "f_missions": {
              "as_is": []
          },
          "f_share": {
              "as_is": [ 
              ]
          },
          "f_sci_ctrls": {
              "negate": [
              ],
              "as_is": []
          }
      }
    ]

  # A JSON list of users that will be permited admin access to JWT
  admins: |-
    [
      "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US"
    ]
          

redis:
  name: redis
  secret:
    secret_name: redis-password
  password: 'redis'
  openshift:
    image: 'centos/redis-32-centos7'
  k8s:
    image: 'redis:3.2'
  replica_count: 1
  imagePullPolicy: IfNotPresent
  #private_image: false

sidecar:
  version: '{{- $.Values.global.jwt.sidecar.version | default $.Values.global.sidecar.version }}'
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  imagePullPolicy: IfNotPresent
  envvars:
    xds_cluster:
      type: value
      value: 'jwt-security'

  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/proxy/tls/sidecar
    secretKeys:
      ca: ca.crt
      cert: service.crt
      key: service.key
