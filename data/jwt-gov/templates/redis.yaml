kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    gm.proxy: {{ .Values.redis.name | default "redis" }}
  name: {{ .Values.redis.name | default "redis" }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.redis.replica_count  }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      gm.proxy: {{ .Values.redis.name | default "redis" }}
      deployment: {{ .Values.redis.name | default "redis" }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  progressDeadlineSeconds: 21600
  template:
    metadata:
      creationTimestamp: null
      labels:
        gm.proxy: {{ .Values.redis.name | default "redis" }}
        deployment: {{ .Values.redis.name | default "redis" }}
    spec:
      containers:
        - name: redis
          {{- if and .Values.global.environment (eq .Values.global.environment "openshift") }}
          image: {{ .Values.redis.openshift.image }}
          {{- else }}
          image: {{ .Values.redis.k8s.image }}
          command:
            - 'redis-server'
          args:
            - '--requirepass'
            - "$(REDIS_PASSWORD)"
          {{- end }}
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.redis.secret.secret_name }}
                key: password
          imagePullPolicy: {{ .Values.redis.image_pull_policy }}
      {{- if .Values.redis.private_image }}
      imagePullSecrets:
      - name: {{ .Values.global.image_pull_secret }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
