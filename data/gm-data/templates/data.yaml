kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.data.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.data.name }}
  replicas: {{ .Values.data.replicas | default 1 }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      gm.proxy: {{ .Values.data.name }}
  template:
    metadata:
      labels:
        gm.proxy: {{ .Values.data.name }}
    spec:
      {{- if and .Values.global.environment (ne .Values.global.environment "openshift") }}
      {{- if .Values.data.security_context.enabled }}
      securityContext:
        fsGroup: {{ .Values.data.security_context.fsGroup }}
      {{- end }}
      {{- end }}
      serviceAccountName: {{ .Values.waiter.serviceAccount.name }}
      initContainers:
        - name: ensure-{{ .Values.data.name }}
          image: {{ .Values.waiter.image }}
          imagePullPolicy: {{ .Values.data.image_pull_policy }}
          env:
            - name: NAMESPACE
              value: {{ .Release.Namespace }}
            - name: SERVICE
              value: {{ .Values.mongo.name }}
      containers:
      - name: {{ .Values.data.name }}
        image: {{ tpl .Values.data.image $ | quote }}
        imagePullPolicy: {{ .Values.data.image_pull_policy }}
        {{- if .Values.data.resources }}
        resources:
{{ toYaml .Values.data.resources | indent 10 }}
        {{- end }}
        {{- if and .Values.global.environment (ne .Values.global.environment "openshift") }}
        {{- if .Values.data.security_context.enabled }}
        securityContext:
          runAsUser: {{ .Values.data.security_context.runAsUser }}
          runAsGroup: {{ .Values.data.security_context.runAsGroup }}
        {{- end }}
        {{- end }}
        env:
          {{- include "data.envvars" (dict "envvar" .Values.data.envvars "top" $) | indent 8 }}
        - name: MONGOHOST
          value: {{ template "greymatter.mongo.address" . }}
        
        {{- if .Values.mongo.secret }}
        - name: MONGO_USE_TLS
          value: "true"
        - name: MONGO_CERT
          valueFrom: 
            secretKeyRef: 
              name: {{ .Values.mongo.secret.secret_name }}
              key: {{ .Values.mongo.secret.secret_keys.cert }}
        - name: MONGO_KEY
          valueFrom: 
            secretKeyRef: 
              name: {{ .Values.mongo.secret.secret_name }}
              key: {{ .Values.mongo.secret.secret_keys.key }}
        - name: MONGO_TRUST
          valueFrom: 
            secretKeyRef: 
              name: {{ .Values.mongo.secret.secret_name }}
              key: {{ .Values.mongo.secret.secret_keys.ca }}
        {{- end }}
        {{- if  (eq .Values.data.envvars.uses3.value  "false") }}
        volumeMounts:
          - name: data-pvc
            mountPath: {{ tpl .Values.data.pvc.mount_point $ }}
        {{- end }}
      - name: sidecar
        image: {{ tpl .Values.sidecar.image $ | quote }}
        imagePullPolicy: {{ .Values.sidecar.image_pull_policy }}
        {{- if .Values.sidecar.resources }}
        resources:
{{ toYaml .Values.sidecar.resources | indent 10 }}
        {{- end }}
        env:
        {{- include "greymatter.envvars" . | indent 8 }}
        ports:
        - containerPort: 8080
          name: proxy
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        {{- if .Values.global.spire.enabled }}
        volumeMounts:
        {{- include "sidecar_volume_mounts" . | indent 8 }}
        {{- else if .Values.data.secret }}
        volumeMounts:
        {{- include "sidecar_volume_certs_mount" . | indent 8 }}
        {{- end}}
      {{- if .Values.global.consul.enabled }}
      {{- $data := dict "Values" .Values "ServiceName" .Values.data.name }}
      {{- include "consul.agent" $data | nindent 6 }}
      {{- end }}
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "curl -k --cacert /etc/proxy/tls/sidecar/ca.crt --key /etc/proxy/tls/sidecar/server.key --cert /etc/proxy/tls/sidecar/server.crt https://localhost:8181/list/1/"
          initialDelaySeconds: 20
          periodSeconds: 5

      imagePullSecrets:
      - name: {{ .Values.data.image_pull_secret | default "docker.secret" }}
      volumes:
      {{- if .Values.global.consul.enabled }}
      - name: data-consul
        emptyDir: {}
      - name: config-consul
        emptyDir: {}
      {{- end }}
      {{- if .Values.global.spire.enabled }}
      {{- include "sidecar_volumes" . | indent 6 }}
      {{- else if .Values.data.secret }}
      {{- include "sidecar_certs_volumes" . | indent 6 }}
      {{- end }}
      - name: data
        secret:
          secretName: {{ .Values.data.secret.secret_name }}
      - name: jwt-security
        secret:
          secretName: jwt-security
      {{- if  (eq .Values.data.envvars.uses3.value  "false") }}
  volumeClaimTemplates:
  - metadata:
      name: data-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.data.pvc.size | default "40" }}Gi
      {{- end }}
