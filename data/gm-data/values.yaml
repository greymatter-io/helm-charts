# Grey Matter Data Defaults

global:
  # Used as imagePullSecrets value for each subchart
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  environment: openshift
  exhibitor:
    replicas: 1
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
  # Zone for Grey Matter objects. Used in sidecar envvars
  zone: zone-default-zone
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: false
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
  # Whether to register services with Consul and where to find the Consul server
  consul:
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  # Configures the init container used to wait on various deployments to be ready
  waiter:
    image: deciphernow/k8s-waiter:latest
    service_account:
      create: true
      name: waiter-sa
  sidecar:
    version: 1.4.4

data:
  # Name used for the deployment and service resources
  name: data
  version: latest
  replicas: 1
  # If set, enables tls using the secret specified in secret_name
  secret:
    enabled: true
    secret_name: data-secrets

  image: docker.greymatter.io/development/gm-data:{{ $.Values.data.version }}
  image_pull_secret: '{{ .Values.global.image_pull_secret }}'
  image_pull_policy: IfNotPresent
  
  master_key: ac8923[lkn43589vi23kl4rfgv0ws
  # Location and (optionally) size of pvc to persist data if not using s3 
  pvc:
    mount_point: /app/buckets/{{ $.Values.data.aws.bucket}}/{{ $.Values.data.envvars.aws_s3_partition.value }}
    #size:
  # Security context for the statefulset if enabled
  security_context:
    enabled: false
    run_as_user: 666
    run_as_group: 666
    fs_group: 666

  # If Grey Matter Data is being deployed as a standalone instance, these values need to be provided
  deploy:
    standalone: false
    # deploy waiter_sa automatically (true if tiller service account has ability to make roles in cluster)
    waiter_sa: false

  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    uses3:
      type: value
      value: 'true'
    aws_access_key_id:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_access_key_id
    aws_secret_access_key:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_secret_access_key
    aws_region:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_region
    aws_s3_bucket:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_s3_bucket
    aws_s3_partition:
      type: value
      value: data
    gmdata_namespace:
      type: value
      value: home
    gmdata_namespace_userfield:
      type: value
      value: email
    jwt_pub:
      type: secret
      secret: jwt-security
      key: jwt.pub
    jwt_api_key:
      type: secret
      secret: jwt-security
      key: jwt.api_key
    less_chatty_info:
      type: value
      value: 'false'
    masterkey:
      type: secret
      secret: '{{ .Values.data.secret.secret_name }}'
      key: master_key
    mongodb:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: database
    gmdata_use_tls:
      type: value
      value: 'true'
    gmdata_cert:
      type: secret
      secret: jwt-certs
      key: server.cert.pem
    gmdata_key:
      type: secret
      secret: jwt-certs
      key: server.key.pem
    gmdata_trust:
      type: secret
      secret: jwt-certs
      key: server.trust.pem
    client_prefix:
      type: value
      value: /services/{{ $.Values.data.name | lower }}/{{ $.Values.data.version }}
    client_jwt_prefix:
      type: value
      value: '/jwt'
    client_jwt_endpoint_address:
      type: value
      value: localhost
    # Use data's egress listener port
    client_jwt_endpoint_port:
      type: value
      value: '10909'
    client_jwt_endpoint_prefix:
      type: value
      value: '/jwt'
    client_jwt_endpoint_use_tls:
      type: value
      value: 'true'
    client_jwt_endpoint_cert:
      type: secret
      secret: jwt-certs
      key: jwt.cert.pem
    client_jwt_endpoint_key:
      type: secret
      secret: jwt-certs
      key: jwt.key.pem
    client_jwt_endpoint_trust:
      type: secret
      secret: jwt-certs
      key: jwt.trust.pem
    mongohost:
      type: value
      value: '{{ template "greymatter.mongo.address" . }}'

  aws:
    access_key: xxx
    secret_key: xxx
    region: us-east-1
    bucket: decipher-quickstart-helm

mongo:
  # Name used for the mongo deployment and service resources
  name: data-mongo
  replicas: 1
  image: 'deciphernow/mongo:4.0.3'
  image_pull_policy: IfNotPresent
  # If defined, sets the size and storageClass name for the Mongo data persistent volume storage class
  storage:
    # Where your mongo image will place its data
    mount_path: /data/db
    # Size, in Gi, that the Mongo PVC should be
    size: 40
    ## Mongo data Persistent Volume Storage Class
    ## If defined, StorageClassName: <storage_class>
    ## If set to "-", StorageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    #storage_class: "-"
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  envvars:
    mongo_initdb_database:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: database
    mongodb_admin_password:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: gmdata_password
    mongodb_database:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: database
    mongodb_user:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: root_username
    mongodb_password:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: root_password
    mongo_cn:
      type: value
      value: 'localhost'
    # If true, .Values.mongo.secret must be specified (see below), and mongo_key, mongo_trust, and mongo_cert must be specified as below
    mongo_use_tls:
      type: value
      value: 'false'
    #mongo_cert:
    #  type: secret
    #  secret: {{ .Values.mongo.secret.secret_name }}
    #  key: {{ .Values.mongo.secret.secret_keys.cert }}
    #mongo_key:
    #  type: secret
    #  secret: {{ .Values.mongo.secret.secret_name }}
    #  key: {{ .Values.mongo.secret.secret_keys.key }}
    #mongo_trust:
    #  type: secret
    #  secret: {{ .Values.mongo.secret.secret_name }}
    #  key: {{ .Values.mongo.secret.secret_keys.ca }}
 
  # The credentials for setting up a mongo user and database for data to connect with
  credentials:
    secret_name: 'mongo-password'
    root_username: 'mongo'
    root_password: 'mongo'
    database: 'gmdata'
    admin_password: 'mongopassword'
    gmdata_username: 'gmdata-user'
    gmdata_password: 'mongopassword'

  # If set, enables tls and configures environment using the secret specified in secret_name
  #secret:
    #secret_name: mongo-certs
    #mount_point: /secret/cert
    #secret_keys:
    #  ca: ca_b64
    #  cert: cert_b64
    #  key: key_b64

sidecar:
  version: '{{ .Values.global.sidecar.version | default "latest" }}'
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  # If set, enables tls using the secret specified in secret_name
  secret:
    enabled: true
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar/
    secret_keys:
      ca: ca.crt
      key: server.key
      cert: server.crt
  image: 'docker.greymatter.io/development/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  image_pull_policy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
