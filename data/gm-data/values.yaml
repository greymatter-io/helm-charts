# Grey Matter Data settings

global:

  imagePullSecret: docker.secret
  
  environment: kubernetes
  domain:
  route_url_name:
  remove_namespace_from_url: ''
  exhibitor:
    replicas: 1
  consul:
    enabled: false
    host: ''
    port: 8500
  control:
    port: 50000
  mesh_tls:
    use_provided_certs: true

  spire:
    enabled: false

  data:
    # This value is used to data where to find jwt and also used to configure the mesh to enable routes from data to jwt
    jwt_prefix: /jwt
    sidecar:
      version: latest

  waiter:
    image: deciphernow/k8s-waiter:latest
    serviceAccount:
      name: waiter-sa

# if this is false then you will need to change values.data.imagePullSecret to refrence a secret already in your namespace.
createDockerSecret: true

data:
  # The name of this installation of GM Data.  Used in the zookeeper address.  Allow to be unique to support multiple installations of Data
  name: data
  version: 1.0.0
  replicas: 1
  secret:
    secret_name: data-secrets
  client_jwt_endpoint_address: localhost
  client_jwt_endpoint_use_tls: 'true'
  base_path: /services/{{ $.Values.data.name | lower }}/{{ $.Values.data.version | trunc 3 }}
  image: docker.production.deciphernow.com/deciphernow/gm-data:{{ $.Values.data.version }}
  imagePullSecret: docker.secret
  certs_mount_point: /certs
  imagePullPolicy: IfNotPresent
  use_tls: true
  master_key: ac8923[lkn43589vi23kl4rfgv0ws
  pvc:
    #size:
    mountPath: /app/buckets/{{ $.Values.data.aws.bucket}}/{{ $.Values.data.envvars.aws_s3_partition.value }}
  # Allows operators to change the user and group to match the process running inside the gm-data container.
  securityContext:
    enabled: false
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666

  # If Grey Matter Data is being deployed as a standalone instance, these values need to be provided
  deploy:
    standalone: false
    # deploy waiterSA automatically (true if tiller service account has ability to make roles in cluster)
    waiterSA: false
    exhibitor_address:
    base_path: /services/{{ .Release.Namespace | lower }}-{{ $.Values.data.name | lower }}/{{ $.Values.data.version }}
    secrets:
      - name: jwt-security
        jwt.key:
        jwt.pub:
        jwt.api_key:
      - name: jwt-certs
        jwt.cert.pem:
        jwt.key.pem:
        jwt.trust.pem:
        server.cert.pem:
        server.key.pem:
        server.trust.pem:


  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    uses3:
      type: value
      value: 'true'
    aws_access_key_id:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_access_key_id
    aws_secret_access_key:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_secret_access_key
    aws_region:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_region
    aws_s3_bucket:
      type: secret
      secret: '{{ $.Values.data.secret.secret_name | lower }}'
      key: aws_s3_bucket
    aws_s3_partition:
      type: value
      value: data
    gmdata_namespace:
      type: value
      value: home
    gmdata_namespace_userfield:
      type: value
      value: userDN
    jwt_pub:
      type: secret
      secret: jwt-security
      key: jwt.pub
    jwt_api_key:
      type: secret
      secret: jwt-security
      key: jwt.api_key
    less_chatty_info:
      type: value
      value: 'false'
    masterkey:
      type: secret
      secret: '{{ .Values.data.secret.secret_name }}'
      key: master_key
    mongo_initdb_root_username:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: gmdata_username
    mongo_initdb_root_password:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: gmdata_password
    mongodb:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: database
    gmdata_use_tls:
      type: value
      value: 'true'
    gmdata_cert:
      type: secret
      secret: jwt-certs
      key: server.cert.pem
    gmdata_key:
      type: secret
      secret: jwt-certs
      key: server.key.pem
    gmdata_trust:
      type: secret
      secret: jwt-certs
      key: server.trust.pem
    client_prefix:
      type: value
      value: /services/{{ .Release.Namespace | lower }}-{{ $.Values.data.name | lower }}/{{ $.Values.data.version }}
    client_jwt_prefix:
      type: value
      value: '{{ .Values.global.data.jwt_prefix }}'
    client_jwt_endpoint_address:
      type: value
      value: localhost
    client_jwt_endpoint_port:
      type: value
      value: '8080'
    client_jwt_endpoint_prefix:
      type: value
      value: '{{ .Values.global.data.jwt_prefix }}'
    client_jwt_endpoint_use_tls:
      type: value
      value: 'true'
    client_jwt_endpoint_cert:
      type: secret
      secret: jwt-certs
      key: jwt.cert.pem
    client_jwt_endpoint_key:
      type: secret
      secret: jwt-certs
      key: jwt.key.pem
    client_jwt_endpoint_trust:
      type: secret
      secret: jwt-certs
      key: jwt.trust.pem

  aws:
    access_key: xxx
    secret_key: xxx
    region: us-east-1
    bucket: decipher-quickstart-helm

mongo:
  name: data-mongo
  replicas: 1
  image: 'deciphernow/mongo:4.0.3'
  imagePullPolicy: IfNotPresent
  #private_image: false
  storage:
    #This mountPath should match where your mongo's image will place its data
    mountPath: /data/db
    # The size, in Gi, that the Mongo PVC should be
    size: 40
    ## Mongo data Persistent Volume Storage Class
    ## If defined, StorageClassName: <storageClass>
    ## If set to "-", StorageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    #storageClass: "-"
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  envvars:
    mongo_initdb_database:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: database
    mongo_initdb_root_username:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: root_username
    mongo_initdb_root_password:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: root_password
    mongodb_admin_password:
      type: secret
      secret: '{{ $.Values.mongo.credentials.secret_name }}'
      key: gmdata_password

  credentials:
    secret_name: 'mongo-password'

  # set secret to enable MONGO_TLS
    #secret:
    #secret_name: mongo-certs
    #mountPoint: /secret/cert
    #secretKeys:
    #  ca: ca_b64
    #  cert: cert_b64
    #  key: key_b64

sidecar:
  version: '{{- $.Values.global.data.sidecar.version | default $.Values.global.sidecar.version }}'
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  imagePullPolicy: IfNotPresent
  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/proxy/tls/sidecar
    secretKeys:
      ca: ca.crt
      cert: service.crt
      key: service.key
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: '{{ $.Values.data.name }}'

