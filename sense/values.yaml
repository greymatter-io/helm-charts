# Grey Matter Sense

global:
  # Used as imagePullSecrets value
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kubernetes", or "openshift"
  environment: openshift
  # Used to configure control and control-api environment variables
  zone: zone-default-zone
  # Whether to use consul for service discovery
  consul:
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
    # Comma delimited string of namespaces for control to monitor. Also used by prometheus.
    additional_namespaces:
  data:
    # whether to install an external data
    external:
      enabled: false
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: true
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
  # Configures the init container used to wait on various deployments to be ready
  waiter:
    image: docker.greymatter.io/internal/k8s-waiter:latest
    service_account:
      create: true
      name: greymatter-waiter-sa
  # Global sidecar configuration (supports global version and envvars)
  sidecar:
    version: 1.6.2
    envvars:
      proxy_dynamic:
        type: 'value'
        value: 'true'
      xds_zone:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      xds_host:
        type: 'value'
        value: 'control.{{ .Release.Namespace }}.svc'
      xds_port:
        type: 'value'
        value: '{{ .Values.global.control.port }}'
      envoy_admin_log_path:
        type: 'value'
        value: '/dev/stdout'

dashboard:
  dashboard:
    # Name used for the deployment and service resources
    name: dashboard
    # Dashboard app version
    version: 5.0.0
    image: 'docker.greymatter.io/release/gm-dashboard:{{ $.Values.dashboard.version }}'
    # Port for the dashboard app
    port: 1337
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # CPU and memory limits for the dashboard app
    resources:
      requests:
        memory: '256Mi'
        cpu: '200m'
      limits:
        memory: '1Gi'
        cpu: '1'
    secret:
      enabled: true
      secret_name: dashboard-certs
      mount_point: /certs
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      fabric_server:
        type: "value"
        value: '/services/catalog/latest/'
      config_server:
        type: "value"
        value: '/services/control-api/latest/v1.0'
      use_prometheus:
        type: "value"
        value: 'true'
      objectives_server:
        type: "value"
        value: '/services/slo/latest/'
      prometheus_server:
        type: "value"
        value: '/services/prometheus/latest/api/v1/'
      base_url:
        type: "value"
        value: '/services/dashboard/{{ $.Values.dashboard.version }}/'
      request_timeout:
        type: "value"
        value: '15000'
      server_ssl_enabled:
        type: "value"
        value: "{{ not .Values.global.spire.enabled }}"
      server_ssl_ca:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.ca }}'
      server_ssl_cert:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.cert }}'
      server_ssl_key:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.key }}'
      # When set to true, disables parts of the UI that use route metrics from Prometheus - service summary view route-level metrics,
      # service routes view entirely, and route SLOs in the service configuration panel.
      disable_prometheus_routes_ui:
        type: "value"
        value: 'false'
      # Enables inline API documentation in service and instance views
      enable_inline_docs:
        type: "value"
        value: "true"

    # Sidecar configuration overrides for dashboard
    sidecar:
      envvars:
        xds_cluster:
          type: value
          value: '{{ .Values.dashboard.name }}'

  prometheus:
    # Used by promethues-configmap.yaml to enable prometheus metrics scraping for sense
    sense_enabled: false
    # Name used for the deployment and service resources
    name: prometheus
    # PVC size in Gb, used in prometheus.yaml volumeClaimTemplate
    pvc_size: 80
    image: 'prom/prometheus:v2.7.1'
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # Prometheus service version
    version: '2.7.1'
    # Number of replicas for the deployment
    replica_count: 1
    # Location where prometheus data should be mounted in the container
    data_mount_point: /var/lib/prometheus/data
    # Location where prometheus config should be mounted
    config_mount_point: /etc/prometheus
    # If true, don't use an image pull secret
    private_image: false
    # Command to start prometheus
    start_cmd: /bin/prometheus
    # Service account for prometheus
    service_account:
      create: true
      name: greymatter-prometheus-sa
    resources:
      requests:
        memory: "8Gi"
        cpu: "1"
      limits:
        memory: "12Gi"
        cpu: "2"

  # Sidecar configuration overrides for prometheus
  sidecar_prometheus:
    envvars:
      xds_cluster:
        type: value
        value: '{{ .Values.prometheus.name }}'

mesh_redis:
  # This is the name of the redis container and therefore svc
  name: mesh-redis
  # This is the name of the secret that holds the password for this redis instance
  secret_name: greymatter-mesh-redis-password
  host: "{{ .Values.mesh_redis.name }}.{{ .Release.Namespace }}.svc"
  port: '6379'
  use_tls: false
  ca_cert_path: ''
  server_cert_path: ''
  server_key_path: ''
  catalog_db: 1
  max_retries: 50
  retry_delay: '5s'

catalog:
  catalog:
    # Name used for the deployment and service resources
    name: catalog
    # GM Catalog version
    version: 2.0.0
    image: docker.greymatter.io/release/gm-catalog:{{ $.Values.catalog.version }}
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # CPU and memory limits for the catalog service
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
    # Catalog service port
    port: 9080
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/pki
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      debug:
        type: value
        value: 'false'
      config_source:
        type: value
        value: 'redis'
      redis_host:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ tpl .Values.mesh_redis.host . }}{{- else}}{{ .Values.global.external_redis.host }}{{- end }}'
      redis_port:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.port }}{{- else}}{{ .Values.global.external_redis.port }}{{- end }}'
      redis_use_tls:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.use_tls }}{{- else}}{{ .Values.global.external_redis.use_tls }}{{- end }}'
      redis_ca_cert_path:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.ca_cert_path }}{{- else}}{{ .Values.global.external_redis.ca_cert_path }}{{- end }}'
      redis_server_cert_path:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.server_cert_path }}{{- else}}{{ .Values.global.external_redis.server_cert_path }}{{- end }}'
      redis_server_key_path:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.server_key_path }}{{- else}}{{ .Values.global.external_redis.server_key_path }}{{- end }}'
      redis_pass:
        type: secret
        secret: '{{ .Values.mesh_redis.secret_name }}'
        key: password
      redis_db:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.catalog_db }}{{- else}}{{ .Values.global.external_redis.catalog_db }}{{- end }}'
      redis_max_retries:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.max_retries }}{{- else}}{{ .Values.global.external_redis.max_retries }}{{- end }}'
      redis_retry_delay:
        type: value
        value: '{{- if .Values.global.external_redis.disabled }}{{ .Values.mesh_redis.retry_delay }}{{- else}}{{ .Values.global.external_redis.retry_delay }}{{- end }}'
      instance_polling_interval:
        type: value
        value: '5s'
      port:
        type: value
        value: '{{ $.Values.catalog.port }}'
      use_tls:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'
      ca_cert_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.ca }}'
      server_cert_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.cert }}'
      server_key_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.key }}'

    # Sidecar configuration overrides for catalog
    sidecar:
      envvars:
        xds_cluster:
          type: value
          value: '{{ .Values.catalog.name }}'

    # SPIRE: If spire is enabled, uncomment to set init job use_tls to false
    init:
      envvars:
        use_tls:
          type: value
          value: '{{ not .Values.global.spire.enabled }}'

# Services list used to configure Catalog, which populates service metadata for GM Dashboard
services:
  catalog:
    catalogEnabled: true
    controlEnabled: true
    serviceName: 'catalog'
    observablesEnabled: false
    port: 9080
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: '/services/catalog/latest/'
    name: 'Grey Matter Catalog'
    owner: 'Decipher'
    data_prefix: "/data"
    version: 2.0.0
    minInstances: 1
    maxInstances: 1
    ownerURL: "https://greymatter.io"
    apiEndpoint: 'services/catalog/latest/'
    apiSpecEndpoint: '/services/catalog/latest/'
    businessImpact: low
    description: The Grey Matter Catalog service interfaces with the Fabric mesh xDS interface to provide high level summaries and more easily consumable views of the current state of the mesh. It powers the Grey Matter application and any other applications that need to understand what is present in the mesh.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: []
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  # control:
  #   name: 'Grey Matter Control'
  #   serviceName: 'control'

  dashboard:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Dashboard'
    serviceName: 'dashboard'
    observablesEnabled: false
    port: 1337
    enableInstanceMetrics: 'true'
    capability: 'Apps'
    documentation: ''
    owner: 'Decipher'
    version: 5.0.0
    ownerURL: "https://greymatter.io"
    apiEndpoint: ''
    apiSpecEndpoint: ''
    businessImpact: low
    description: The Grey Matter application is a user dashboard that paints a high-level picture of the service mesh.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: []
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt


  prometheus:
    catalogEnabled: false
    controlEnabled: true
    name: 'Prometheus'
    serviceName: 'prometheus'
    observablesEnabled: false
    port: 9090
    secret:
      enabled: false

  data:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Data'
    serviceName: 'data'
    observablesEnabled: false
    port: 8181
    enableInstanceMetrics: 'true'
    capability: 'Data'
    jwt_prefix: '/jwt'
    documentation: '/services/data/latest/static/ui/index.html'
    owner: 'Decipher'
    version: 1.2.1
    ownerURL: "https://greymatter.io"
    apiEndpoint: 'services/data/latest/'
    apiSpecEndpoint: '/latest/static/'
    businessImpact: low
    description: Grey Matter Data is an API that enables secure and flexible access control for your microservices.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: [{title: "API Explorer", url: "/services/data/latest/static/ui/index.html"}]
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  jwt:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter JWT Security'
    serviceName: 'jwt-security'
    observablesEnabled: false
    port: 3000
    enableInstanceMetrics: 'true'
    capability: 'Security'
    documentation: '/services/jwt-security/latest/'
    owner: 'Decipher'
    version: '1.3.0'
    ownerURL: "https://greymatter.io"
    apiEndpoint: 'services/jwt-security/latest/'
    apiSpecEndpoint: '/services/jwt-security/latest/'
    businessImpact: low
    description: The Grey Matter JWT security service is a JWT Token generation and retrieval service.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: []
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  controlApi:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Control API'
    serviceName: 'control-api'
    observablesEnabled: false
    port: 5555
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: '/services/control-api/latest/'
    owner: 'Decipher'
    version: '1.6.1'
    ownerURL: "https://greymatter.io"
    apiEndpoint: 'services/control-api/latest/'
    apiSpecEndpoint: '/services/control-api/latest/'
    businessImpact: low
    description: The purpose of the Grey Matter Control API is to update the configuration of every Grey Matter Proxy in the mesh.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: []
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  edge:
    catalogEnabled: true
    controlEnabled: false
    name: 'Grey Matter Edge'
    serviceName: 'edge'
    observablesEnabled: false
    port: 10808
    # This is the DN of the new certificate issued to the edge for internal mesh communication. It needs to be whitelisted by the proxies
    egressDn: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge
    # We use a static cert on the edge listener
    removeListenerSecret: true
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: ''
    owner: 'Decipher'
    version: '1.6.2'
    ownerURL: "https://greymatter.io"
    apiEndpoint: ''
    apiSpecEndpoint: ''
    businessImpact: low
    description: Grey Matter Edge handles north/south traffic flowing through the mesh.
    # External links configures the "Service Tools" dropdown in service view
    externalLinks: []
    ingress:
      secret:
        enabled: true
        secret_name: greymatter-edge-ingress
        mount_point: /etc/proxy/tls/edge
        secret_keys:
          cert: server.crt
          key: server.key
          ca: ca.crt
    egress:
      secret:
        enabled: '{{- not .Values.global.spire.enabled }}'
        secret_name: greymatter-edge-egress
        mount_point: /etc/proxy/tls/sidecar
        secret_keys:
          cert: server.crt
          key: server.key
          ca: ca.crt
