# Grey Matter Sense

global:
  # Used as imagePullSecrets value
  image_pull_secret: docker.secret    
  # Deployment environment, one of "eks", "kubernetes", or "openshift"
  environment: openshift              
  # Used to configure control and control-api environment variables
  zone: zone-default-zone             
  # Whether to use consul for service discovery
  consul:                             
    enabled: false
    host: ''
    port: 8500
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
    # Comma delimited string of namespaces for control to monitor. Also used by prometheus.    
    additional_namespaces:       
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: true
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock' 
  # Configures the init container used to wait on various deployments to be ready
  waiter:
    image: deciphernow/k8s-waiter:latest
    service_account: 
      create: true
      name: waiter-sa
  # Global sidecar configuration (supports global version and envvars)
  sidecar:
    version: 1.4.1
    envvars:
      proxy_dynamic:
        type: 'value'
        value: 'true'
      xds_zone:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      xds_host:
        type: 'value'
        value: 'control.{{ .Release.Namespace }}.svc'
      xds_port:
        type: 'value'
        value: '{{ .Values.global.control.port }}'
      xds_node_id:
        type: 'value'
        value: 'default'
      envoy_admin_log_path:
        type: 'value'
        value: '/dev/stdout'
slo:   
  slo:
    # SLO version
    version: 1.1.4
    image: 'docker-dev.production.deciphernow.com/deciphernow/gm-slo:{{ $.Values.slo.version }}'
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # CPU and memory limits for the SLO service
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
    # Secret used to template envvars
    secret:
      enabled: true
      secret_name: slo-certs
      mount_point: /service-certs
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      postgresql_username:
        type: secret
        secret: '{{ .Values.postgres.credentials.secret_name }}'
        key: username
      postgresql_password:
        type: secret
        secret: '{{ .Values.postgres.credentials.secret_name }}'
        key: password
      postgresql_database:
        type: secret
        secret: '{{ .Values.postgres.credentials.secret_name }}'
        key: database
      # Postgresql endpoint - only templated if rds is enabled, otherwise the var isn't included at all
      postgresql_endpoint:
        type: "{{- if .Values.postgres.rds.enabled }}value{{- else }}null{{- end }}"
        value: "{{ .Values.postgres.rds.endpoint }}"
      service_port:
        type: value
        value: "1337"
      # SSL for SLO <-> postgres connection. Enabled if posgres.secret.enabled is true. 
      ssl_enabled:
        type: value
        value: "{{- if .Values.postgres.secret.enabled }}true{{- else }}false{{- end }}"
      ssl_server_ca:
        type: value
        value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.ca }}"
      ssl_server_cert:
        type: value
        value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.cert }}"
      ssl_server_key:
        type: value
        value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.key }}"
      # SSL for the SLO service. Enabled if slo.secret.enabled is true.
      service_ssl_enabled:
        type: value
        value: "{{- if .Values.global.spire.enabled }}false{{- else if .Values.slo.secret.enabled }}true{{- else }}false{{- end }}"
      service_ssl_ca:
        type: value
        value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.ca }}"
      service_ssl_cert:
        type: value
        value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.cert }}"
      service_ssl_key:
        type: value
        value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.key }}"
      drop_schema:
        type: value
        value: "false"
      # One way ssl between SLO <-> Postgres. Enabled if postgres.rds.enabled is true.
      ssl_1_way_ssl:
        type: value
        value: "{{- if .Values.postgres.rds.enabled }}true{{- else }}false{{- end }}"
    # Sidecar configuration overrides for SLO
    sidecar:
      envvars:
        xds_cluster:
          type: value
          value: '{{ .Values.slo.name }}'

  postgres:
    image: 'docker.io/centos/postgresql-10-centos7'
    # Postgres username/password/database secret, used to configure slo envvars and postgres-slo-config.yaml
    credentials:
      secret_name: postgres-credentials
      username: greymatter
      database: greymatter
    # Configuration to run an Amazon RDS instance of Postgres
    rds:
      enabled: false
      endpoint:
    data_mount_point: /var/lib/pgsql/data
    # When to pull images, used in the deployment
    image_pull_policy: IfNotPresent
    # Number of replicas for the deployment
    replica_count: 1
    # If true, don't use the image pull secret
    private_image: false
    # CPU and memory limits for the sidecar
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
    conf_mount_point: /conf
    # This override is unique to OpenShift's postgresql container
    # https://github.com/sclorg/postgresql-container/tree/master/examples/custom-config
    overrides_mount_point: /opt/app-root/src/postgresql-cfg
    # Secret that enables slo <-> postgres ssl
    secret:
      enabled: true
      secret_name: postgres-ssl-certs
      mount_point: /certs
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      postgresql_user:
        type: secret
        secret: postgres-credentials
        key: username
      postgresql_password:
        type: secret
        secret: postgres-credentials
        key: password
      postgres_user_cn:
        type: value
        value: CN=greymatter, OU=Engineering, O=Decipher Technology Studios, L=Alexandria, ST=Virginia, C=US
      postgresql_database:
        type: secret
        secret: postgres-credentials
        key: database

dashboard:
  dashboard:
    # Name used for the deployment and service resources
    name: dashboard
    # Dashboard app version
    version: "3.4.1"
    image: 'docker-dev.production.deciphernow.com/deciphernow/gm-dashboard:{{ $.Values.dashboard.version }}'
    # Port for the dashboard app
    port: 1337
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # CPU and memory limits for the dashboard app
    resources:
      requests:
        memory: '2Gi'
        cpu: '1'
      limits:
        memory: '6Gi'
        cpu: '2'
    secret:
      enabled: true
      secret_name: dashboard-certs
      mount_point: /certs
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      fabric_server:
        type: "value"
        value: '/services/catalog/latest/'
      config_server:
        type: "value"
        value: '/services/control-api/latest/v1.0'
      use_prometheus:
        type: "value"
        value: 'true'
      objectives_server:
        type: "value"
        value: '/services/slo/latest/'
      prometheus_server:
        type: "value"
        value: '/services/prometheus/latest/api/v1/'
      base_url:
        type: "value"
        value: '/services/dashboard/{{ $.Values.dashboard.version }}/'
      request_timeout:
        type: "value"
        value: '15000'
      server_ssl_enabled:
        type: "value"
        value: "{{ not .Values.global.spire.enabled }}"
      server_ssl_ca:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.ca }}'
      server_ssl_cert:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.cert }}'
      server_ssl_key:
        type: "value"
        value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.key }}'
    # Sidecar configuration overrides for dashboard
    sidecar:
      envvars:
        xds_cluster:
          type: value
          value: '{{ .Values.dashboard.name }}'

  prometheus:
    # Used by promethues-configmap.yaml to enable prometheus metrics scraping for sense
    sense_enabled: false
    # Name used for the deployment and service resources
    name: prometheus
    # PVC size in Gb, used in prometheus.yaml volumeClaimTemplate
    pvc_size: 80
    image: 'prom/prometheus:v2.7.1'
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # Prometheus service version
    version: '2.7.1'
    # Number of replicas for the deployment
    replica_count: 1
    # Location where prometheus data should be mounted in the container
    data_mount_point: /var/lib/prometheus/data
    # Location where prometheus config should be mounted
    config_mount_point: /etc/prometheus
    # If true, don't use an image pull secret
    private_image: false
    # Command to start prometheus
    start_cmd: /bin/prometheus
    # Service account for prometheus
    service_account:
      create: true
      name: prometheus-sa
    resources:
      requests:
        memory: "8Gi"
        cpu: "1"
      limits:
        memory: "12Gi"
        cpu: "2"
        
  # Sidecar configuration overrides for prometheus
  sidecar_prometheus:
    envvars:
      xds_cluster:
        type: value
        value: '{{ .Values.prometheus.name }}'

catalog:
  catalog:
    # Name used for the deployment and service resources
    name: catalog
    # GM Catalog version
    version: 1.0.7
    image: docker-dev.production.deciphernow.com/deciphernow/gm-catalog:{{ $.Values.catalog.version }}
    # When to pull container images, used in the deployment
    image_pull_policy: IfNotPresent
    # CPU and memory limits for the catalog service
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
    # Catalog service port
    port: 9080
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/pki
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      config_source:
        type: value
        value: 'gmdata'
      config_polling_interval:
        type: value
        value: '30s'
      port:
        type: value
        value: '{{ $.Values.catalog.port }}'
      control_server_0_address:
        type: value
        value: 'control.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.control.port }}'
      control_server_0_zone_name:
        type: value
        value: '{{ .Values.global.zone }}'
      control_server_0_request_cluster_name:
        type: value
        value: 'edge'
      use_tls:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'
      ca_cert_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.ca }}'
      server_cert_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.cert }}'
      server_key_path:
        type: value
        value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.key }}'
      client_address:
        type: value
        value: localhost
      client_port:
        type: value
        value: '{{- if .Values.global.spire.enabled }}10909{{- else}}10808{{- end }}'
      client_prefix:
        type: value
        value: '/data'
      client_use_tls:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'
      client_cert:
        type: secret
        secret: sidecar-certs
        key: cert_b64
      client_key:
        type: secret
        secret: sidecar-certs
        key: key_b64
      client_trust:
        type: secret
        secret: sidecar-certs
        key: ca_b64
      gmdata_startup_delay:
        type: value
        value: '10s'
      gmdata_max_retries:
        type: value
        value: '100'
      gmdata_retry_delay:
        type: value
        value: '5s'
      gmdata_root_event_name:
        type: value
        value: 'world'
      client_identity:
        type: value
        value: 'CN=greymatter,OU=Engineering,O=Decipher Technology Studios,L=Alexandria,ST=Virginia,C=US'
      client_email:
        type: value
        value: 'engineering@greymatter.io'
    # Sidecar configuration overrides for catalog
    sidecar:
      envvars:
        xds_cluster:
          type: value
          value: '{{ .Values.catalog.name }}'

    # SPIRE: If spire is enabled, uncomment to set init job use_tls to false
    init:
      envvars:
        use_tls:
          type: value
          value: '{{ not .Values.global.spire.enabled }}'

# Services list used to configure Catalog, which populates service metadata for GM Dashboard
services:
  catalog:
    catalogEnabled: true
    controlEnabled: true
    serviceName: 'catalog'
    observablesEnabled: false
    port: 9080
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: '/services/catalog/latest/'
    name: 'Grey Matter Catalog'
    owner: 'Decipher'
    version: 1.0.7
    minInstances: 1
    maxInstances: 1
    data_prefix: "/data"
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/pki
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt
    routes:
      - '/services/catalog/{{ $.Values.services.catalog.version }}'
      - '/services/catalog/{{ $.Values.services.catalog.version }}/'

  # control:
  #   name: 'Grey Matter Control'
  #   serviceName: 'control'
  #   routes:
  # - '/services/xds/{{ $.Values.global.xds.version }}'
  # - '/services/xds/{{ $.Values.global.xds.version }}'

  dashboard:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Dashboard'
    serviceName: 'dashboard'
    observablesEnabled: false
    port: 1337
    enableInstanceMetrics: 'true'
    capability: 'Apps'
    documentation: ''
    owner: 'Decipher'
    version: 3.4.1
    routes:
      - '/services/dashboard/latest'
      - '/services/dashboard/latest/'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt


  prometheus:
    catalogEnabled: false
    controlEnabled: true
    name: 'Prometheus'
    serviceName: 'prometheus'
    observablesEnabled: false
    port: 9090
    secret:
      enabled: false

  data:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Data'
    serviceName: 'data'
    observablesEnabled: false
    port: 8181
    enableInstanceMetrics: 'true'
    capability: 'Data'
    documentation: '/services/data/latest/static/ui/index.html'
    owner: 'Decipher'
    version: 1.1.0
    routes:
      - '/services/data/{{ $.Values.services.data.version }}'
      - '/services/data/{{ $.Values.services.data.version }}/'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  internal-data:
    catalogEnabled: false
    controlEnabled: true
    name: 'Grey Matter Internal Data'
    serviceName: 'data-internal'
    observablesEnabled: false
    port: 8181
    enableInstanceMetrics: "true" 
    capability: 'Data'
    documentation: '/services/data/latest/static/ui/index.html'
    name: 'Grey Matter Internal Data'
    owner: 'Decipher'
    version: 1.1.0
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  jwt:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter JWT Security'
    serviceName: 'jwt-security'
    observablesEnabled: false
    port: 3000
    enableInstanceMetrics: 'true'
    capability: 'Security'
    documentation: ''
    owner: 'Decipher'
    version: '1.1.1'
    routes:
      - '/services/jwt-security/{{ $.Values.services.jwt.version }}'
      - '/services/jwt-security/{{ $.Values.services.jwt.version }}/'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  internal-jwt:
    catalogEnabled: false
    controlEnabled: true
    name: 'Grey Matter JWT Security Internal'
    serviceName: 'internal-jwt-security'
    observablesEnabled: false
    port: 3000
    enableInstanceMetrics: 'true'
    capability: 'Grey Matter'
    documentation: ''
    owner: 'Decipher'
    version: '1.1.1'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  controlApi:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Control API'
    serviceName: 'control-api'
    observablesEnabled: false
    port: 5555
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation:
    owner: 'Decipher'
    version: '1.4.3'
    routes:
      - '/services/control-api/{{ $.Values.services.controlApi.version }}'
      - '/services/control-api/{{ $.Values.services.controlApi.version }}/'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  edge:
    catalogEnabled: true
    controlEnabled: false
    name: 'Grey Matter Edge'
    serviceName: 'edge'
    observablesEnabled: false
    port: 10808
    # This is the DN of the new certificate issued to the edge for internal mesh communication. It needs to be whitelisted by the proxies
    egressDn: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter
    # We use a static cert on the edge listener
    removeListenerSecret: true
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentatio: ''
    owner: 'Decipher'
    version: '1.4.1'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/edge
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  slo:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Service Level Objectives'
    serviceName: 'slo'
    observablesEnabled: false
    port: 1337
    enableInstanceMetrics: 'true'
    capability: 'Sense'
    documentation:
    owner: 'Decipher'
    version: '1.1.4'
    routes:
      - '/services/slo/{{ $.Values.services.slo.version }}'
      - '/services/slo/{{ $.Values.services.slo.version }}/'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt