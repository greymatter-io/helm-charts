# Grey Matter Service Level Objectives Defaults

global:
  # Used as imagePullSecrets value
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kubernetes", or "openshift"
  environment: openshift
  # Used to configure control and control-api environment variables
  zone: zone-default-zone
  # Whether to use consul for service discovery
  consul:
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: false
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
  # Configures the init container used to wait on various deployments to be ready
  waiter:
    image: docker.greymatter.io/internal/k8s-waiter:latest
    service_account:
      name: greymatter-waiter-sa
  # Global sidecar configuration (supports global version and envvars)
  sidecar:
    version: 1.6.2
  # To use the global certs or not
  global_certs:
    enabled: true
  release:
    # release.production: true will increase all (except control-api) replicas to the default_replicas.  Otherwise the default for each chart will be used
    production: false
    default_replicas: 3
slo:
  name: "slo"
  # SLO version
  version: 2.0.0
  image: "docker.greymatter.io/development/gm-slo:{{ .Values.slo.version }}"
  # When to pull container images, used in the deployment
  image_pull_policy: IfNotPresent
  replicas: 1
  # CPU and memory limits for the SLO service
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  # Secret used to template envvars
  secret:
    enabled: true
    secret_name: slo-certs
    mount_point: /service-certs
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  envvars:
    postgresql_username:
      type: secret
      secret: '{{ .Values.postgres.credentials.secret_name }}'
      key: username
    postgresql_password:
      type: secret
      secret: '{{ .Values.postgres.credentials.secret_name }}'
      key: password
    postgresql_database:
      type: secret
      secret: '{{ .Values.postgres.credentials.secret_name }}'
      key: database
    # Postgresql endpoint - only templated if rds is enabled, otherwise the var isn't included at all
    postgresql_endpoint:
      type: "{{- if .Values.postgres.rds.enabled }}value{{- else }}null{{- end }}"
      value: "{{ .Values.postgres.rds.endpoint }}"
    service_port:
      type: value
      value: "1337"
    # SSL for SLO <-> postgres connection. Enabled if posgres.secret.enabled is true.
    ssl_enabled:
      type: value
      value: "{{- if .Values.postgres.secret.enabled }}true{{- else }}false{{- end }}"
    ssl_server_ca:
      type: value
      value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.ca }}"
    ssl_server_cert:
      type: value
      value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.cert }}"
    ssl_server_key:
      type: value
      value: "{{ .Values.postgres.secret.mount_point}}/{{ .Values.postgres.secret.secret_keys.key }}"
    # SSL for the SLO service. Enabled if slo.secret.enabled is true.
    service_ssl_enabled:
      type: value
      value: "{{- if .Values.slo.secret.enabled }}true{{- else }}false{{- end }}"
    service_ssl_ca:
      type: value
      value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.ca }}"
    service_ssl_cert:
      type: value
      value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.cert }}"
    service_ssl_key:
      type: value
      value: "{{ .Values.slo.secret.mount_point}}/{{ .Values.slo.secret.secret_keys.key }}"
    drop_schema:
      type: value
      value: "false"
    # One way ssl between SLO <-> Postgres. Enabled if postgres.rds.enabled is true.
    ssl_1_way_ssl:
      type: value
      value: "{{- if .Values.postgres.rds.enabled }}true{{- else }}false{{- end }}"

# Sidecar configuration for SLO
sidecar:
  version: '{{- $.Values.global.sidecar.version | default "latest" }}'
  image: 'docker.greymatter.io/release/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  secret:
    enabled: true
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  # Overrides global.sidecar.envvars
  envvars:
    xds_cluster:
      type: value
      value: '{{ .Values.slo.name }}'
  # When to pull images, used in the deployment
  image_pull_policy: IfNotPresent
  # CPU and memory limits for the sidecar
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

postgres:
  image: 'docker.io/centos/postgresql-10-centos7'
  # Postgres username/password/database secret, used to configure slo envvars and postgres-slo-config.yaml
  credentials:
    secret_name: postgres-credentials
    username: greymatter
    database: greymatter
  # Configuration to run an Amazon RDS instance of Postgres
  rds:
    enabled: false
    endpoint:
  data_mount_point: /var/lib/pgsql/data
  # When to pull images, used in the deployment
  image_pull_policy: IfNotPresent
  # Number of replicas for the deployment
  replica_count: 1
  # If true, don't use the image pull secret
  private_image: false
  # CPU and memory limits for the sidecar
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  conf_mount_point: /conf
  # This override is unique to OpenShift's postgresql container
  # https://github.com/sclorg/postgresql-container/tree/master/examples/custom-config
  overrides_mount_point: /opt/app-root/src/postgresql-cfg
  # Secret that enables slo <-> postgres ssl
  secret:
    enabled: true
    secret_name: postgres-ssl-certs
    mount_point: /certs
    secret_keys:
      ca: ca.pem
      cert: server.crt
      key: server.key
  envvars:
    postgresql_user:
      type: secret
      secret: postgres-credentials
      key: username
    postgresql_password:
      type: secret
      secret: postgres-credentials
      key: password
    postgres_user_cn:
      type: value
      value: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=greymatter
    postgresql_database:
      type: secret
      secret: postgres-credentials
      key: database
