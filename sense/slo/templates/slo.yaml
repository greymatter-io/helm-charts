kind: Deployment
apiVersion: apps/v1
metadata:
  name: slo
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: slo
      deployment: slo
  replicas: 1
  template:
    metadata:
      labels:
        app: slo
        deployment: slo
    spec:
      {{- if and .Values.global.environment (ne .Values.global.environment "openshift") }}
      securityContext:
        runAsUser: 2000
        runAsGroup: 0
        fsGroup: 2000
      {{- end }}
      serviceAccountName: {{ .Values.global.waiter.service_account.name }}
      {{- if not .Values.postgres.rds.enabled }}
      initContainers:
        - name: ensure-postgres
          image: {{ .Values.global.waiter.image }}
          env:
            - name: NAMESPACE
              value: {{ .Release.Namespace }}
            - name: SERVICE
              value: postgres-slo
            - name: POST_DELAY
              value: "3"
      {{- end }}
      containers:
      - name: slo
        image: {{ .Values.slo.image | quote }}
        imagePullPolicy: {{ .Values.slo.imagePullPolicy }}
        {{- if .Values.slo.resources }}
        resources:
{{ toYaml .Values.slo.resources | indent 10 }}
        {{- end }}
        volumeMounts:
          {{- if .Values.postgres.secret }}
        - name: postgres-certs
          mountPath: {{ .Values.postgres.secret.mountPoint }}
          {{- end}}
          {{- if .Values.slo.secret }}
        - name: service-certs
          mountPath: {{ .Values.slo.secret.mountPoint }}
          {{- end }}
        env:        
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.credentials.secret_name }}
              key: username
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.credentials.secret_name }}
              key: password
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgres.credentials.secret_name }}
              key: database
        {{- if .Values.postgres.rds.enabled }}
        - name: POSTGRESQL_ENDPOINT
          value: {{ .Values.postgres.rds.endpoint }}
        {{- end }}
        - name: DATABASE_URI
          {{- if .Values.postgres.rds.enabled }}
          value: postgres://$(POSTGRESQL_USERNAME):$(POSTGRESQL_PASSWORD)@$(POSTGRESQL_ENDPOINT):5432/$(POSTGRESQL_DATABASE)
          {{- else}}
          value: postgres://$(POSTGRESQL_USERNAME):$(POSTGRESQL_PASSWORD)@postgres-slo.{{ .Release.Namespace }}.svc:5432/$(POSTGRESQL_DATABASE)
          {{- end }}
        - name: SERVICE_PORT
          value: "1337"
        {{- if .Values.postgres.secret }}
        - name: SSL_ENABLED
          value: "true"
        - name: SSL_SERVER_CA
          value: {{ .Values.postgres.secret.mountPoint}}/{{ .Values.postgres.secret.secret_keys.ca }}
        {{- if not .Values.postgres.rds.enabled }}
        - name: SSL_SERVER_CERT
          value: {{ .Values.postgres.secret.mountPoint}}/{{ .Values.postgres.secret.secret_keys.cert }}
        - name: SSL_SERVER_KEY
          value: {{ .Values.postgres.secret.mountPoint}}/{{ .Values.postgres.secret.secret_keys.key }}
        {{- end }}
        {{- end }}
        {{- if and .Values.slo.secret }}
        - name: SERVICE_SSL_ENABLED
          value: "true"
        - name: SERVICE_SSL_CA
          value: {{ .Values.slo.secret.mountPoint}}/{{ .Values.slo.secret.secret_keys.ca }}
        - name: SERVICE_SSL_CERT
          value: {{ .Values.slo.secret.mountPoint}}/{{ .Values.slo.secret.secret_keys.cert }}
        - name: SERVICE_SSL_KEY
          value: {{ .Values.slo.secret.mountPoint}}/{{ .Values.slo.secret.secret_keys.key }}
        {{- end }}
        {{- if .Values.postgres.rds.enabled }}
        - name: DROP_SCHEMA
          value: "false"
        - name: SSL_1_WAY_SSL
          value: "true"
        {{- end }}
      - name: sidecar
        image: {{ tpl .Values.sidecar.image $ | quote }}
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy }}
        {{- if .Values.sidecar.resources }}
        resources:
{{ toYaml .Values.sidecar.resources | indent 10 }}
        {{- end }}
        ports:
        - name: proxy
          containerPort: 8080
        - name: metrics
          containerPort: 8081
        env:
        {{- include "greymatter.envvars" . | indent 8 }}
        {{- if .Values.sidecar.secret }}
        volumeMounts:
        {{- include "sidecar_volume_certs_mount" . | indent 8 }}
        {{- end }}
      {{- if .Values.global.consul.enabled }}
      {{- $data := dict "Values" .Values "ServiceName" "slo" }}
      {{- include "consul.agent" $data | nindent 6 }}
      {{- end }}
      imagePullSecrets:
        - name: {{ .Values.global.image_pull_secret }}
      volumes:
      {{- if .Values.sidecar.secret }}
      {{- include "sidecar_certs_volumes" . | indent 6 }}
      {{- end }}
      {{- if .Values.postgres.secret}}
      - name: postgres-certs
        secret:
          secretName: {{ .Values.postgres.secret.secret_name }}
          defaultMode: 0600
      {{- end }}
      {{- if .Values.slo.secret}}
      - name: service-certs
        secret:
          secretName: {{ .Values.slo.secret.secret_name }}
          defaultMode: 0600
      {{- end }}
      {{- if .Values.global.consul.enabled }}
      - name: data-consul
        emptyDir: {}
      - name: config-consul
        emptyDir: {}
      {{- end }}
