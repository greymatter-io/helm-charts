# Grey Matter Catalog Defaults

global:
  # Used as imagePullSecrets value for each subchart
  image_pull_secret: docker.secret    
  # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  environment: openshift              
  # Used to configure control and control-api environment variables
  zone: zone-default-zone             
  # Whether to use consul for service discovery
  consul:                             
    enabled: false
    host: ''
    port: 8500
  # Port for Grey Matter Control. Used in catalog init and sidecar envvars.
  controlPort: 50000                  

# Configures the init container used to wait on various deployments to be ready
waiter:                             
  image: deciphernow/k8s-waiter:latest
  service_account: 
    create: true
    name: waiter-sa

catalog:
  # Name used for the deployment and service resources
  name: catalog
  # GM Catalog version
  version: latest
  image: docker-dev.production.deciphernow.com/deciphernow/gm-catalog:{{ $.Values.catalog.version }}
  # When to pull container images, used in the deployment
  imagePullPolicy: IfNotPresent
  # CPU and memory limits for the catalog service
  resources:
    limits:
      cpu: 200m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
  # Catalog service port
  port: 9080
  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/pki
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  envvars:
    config_source:
      type: value
      value: 'gmdata'
    config_polling_interval:
      type: value
      value: '300s'
    port:
      type: value
      value: '{{ $.Values.catalog.port }}'
    control_server_0_address:
      type: value
      value: 'control.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.controlPort }}'
    control_server_0_zone_name:
      type: value
      value: '{{ .Values.global.zone }}'
    control_server_0_request_cluster_name:
      type: value
      value: 'edge'
    use_tls:
      type: value
      value: 'true'
    ca_cert_path:
      type: value
      value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.ca }}'
    server_cert_path:
      type: value
      value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.cert }}'
    server_key_path:
      type: value
      value: '/etc/pki/{{ .Values.catalog.secret.secret_keys.key }}'
    client_address:
      type: value
      value: localhost
    client_port:
      type: value
      value: '8080'
    client_prefix:
      type: value
      value: '/data'
    client_use_tls:
      type: value
      value: 'true'
    client_cert:
      type: secret
      secret: sidecar-certs
      key: cert_b64
    client_key:
      type: secret
      secret: sidecar-certs
      key: key_b64
    client_trust:
      type: secret
      secret: sidecar-certs
      key: ca_b64
    gmdata_startup_delay:
      type: value
      value: '10s'
    gmdata_max_retries:
      type: value
      value: '100'
    gmdata_retry_delay:
      type: value
      value: '5s'
    gmdata_root_event_name:
      type: value
      value: 'world'
    client_identity:
      type: value
      value: 'CN=gm-control,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US'
    client_email:
      type: value
      value: 'gm-control@deciphernow.com'

# Sidecar configuration (control-api is the only service in this chart with a proxy)
sidecar:
  # GM Proxy version, used by control-api
  version: latest
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  secret:
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key    
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  # When to pull images, used in the deployment
  image_pull_policy: IfNotPresent
  # CPU and memory limits for the sidecar
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: '{{ .Values.catalog.name }}'
    proxy_dynamic:
      type: 'value'
      value: 'true'
    xds_zone:
      type: 'value'
      value: '{{ .Values.global.zone }}'
    xds_host:
      type: 'value'
      value: 'control.{{ .Release.Namespace }}.svc'
    xds_port:
      type: 'value'
      value: '{{ .Values.global.controlPort | quote }}'
    xds_node_id:
      type: 'value'
      value: 'default'
    envoy_admin_log_path:
      type: 'value'
      value: '/dev/stdout'