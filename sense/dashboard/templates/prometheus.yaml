kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.prometheus.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.prometheus.name }}
  selector:
    matchLabels:
      gmproxy: {{ .Values.prometheus.name }}
      deployment: {{ .Values.prometheus.name }}
  replicas: {{ .Values.prometheus.replica_count }}
  template:
    metadata:
      labels:
        gmproxy: {{ .Values.prometheus.name }}
        deployment: {{ .Values.prometheus.name }}
    spec:
      serviceAccountName: {{ .Values.prometheus.service_account.name }}
      {{- if eq .Values.global.environment "openshift"}}
      securityContext:
        # Adding the user to root group.
        runAsGroup: 0
      {{- else }}
      securityContext:
        runAsUser: 2000
        runAsGroup: 0
        fsGroup: 2000
      {{- end }}
      containers:
      - name: prometheus
        image: {{ .Values.prometheus.image | quote }}
        {{- if .Values.prometheus.resources }}
        resources:
{{ toYaml .Values.prometheus.resources | indent 10 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 9090
        command:
        - {{ .Values.prometheus.start_cmd | quote }}
        args:
        - "--query.timeout=4m"
        - "--query.max-samples=5000000000"
        - "--storage.tsdb.path={{ .Values.prometheus.data_mount_point }}/data"
        - "--config.file={{ .Values.prometheus.config_mount_point }}/prometheus.yaml"
        - "--web.console.libraries=/usr/share/prometheus/console_libraries"
        - "--web.console.templates=/usr/share/prometheus/consoles"
        - "--web.enable-admin-api"
        - "--web.external-url=http://anything/services/prometheus/latest"
        - "--web.route-prefix=/"
        volumeMounts:
        - name: prometheus-configuration
          mountPath: {{ .Values.prometheus.config_mount_point }}
        - name: prometheus-pvc
          mountPath: {{ .Values.prometheus.data_mount_point }}
      {{- if .Values.global.consul.enabled }}
      {{- $data := dict "Values" .Values "ServiceName" "prometheus" }}
      {{- include "consul.agent" $data | nindent 6 }}
      {{- end }}
      - name: sidecar
        image: {{ tpl .Values.sidecar_prometheus.image $ }}
        imagePullPolicy: {{ .Values.prometheus.image_pull_policy }}
        {{- if .Values.sidecar_prometheus.resources }}
        resources:
{{ toYaml .Values.sidecar_prometheus.resources | indent 10 }}
        {{- end }}
        {{- if .Values.sidecar_prometheus.secret }}
        volumeMounts:
        - name: sidecar-certs
          mountPath: {{ .Values.sidecar_prometheus.secret.mount_point }}
          readOnly: true
        {{- end }}
        ports:
        - name: proxy
          containerPort: {{ .Values.sidecar_prometheus.port }}
        - name: metrics
          containerPort: {{ .Values.sidecar_prometheus.metrics_port }}
        env:   
        {{- include "sidecar.envvars-prometheus" . | indent 8 }}
      imagePullSecrets:
      - name: {{ .Values.global.image_pull_secret }}
      volumes:
      {{- if .Values.global.consul.enabled }}
      - name: data-consul
        emptyDir: {}
      - name: config-consul
        emptyDir: {}
      {{- end }}
      {{- if .Values.sidecar_prometheus.secret }}
      - name: sidecar-certs
        secret:
          secretName: {{ .Values.sidecar_prometheus.secret.secret_name }}
      {{- end }}
      - name: prometheus-configuration
        configMap:
          name: prometheus
  volumeClaimTemplates:
  - metadata:
      name: prometheus-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.prometheus.pvc_size | default "40" }}Gi
