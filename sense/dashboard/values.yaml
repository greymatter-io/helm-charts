# Grey Matter Dashboard Defaults

global:
  # Used as imagePullSecrets value
  image_pull_secret: docker.secret    
  # Deployment environment, one of "eks", "kubernetes", or "openshift"
  environment: openshift              
  # Used to configure control and control-api environment variables
  zone: zone-default-zone             
  # Whether to use consul for service discovery
  consul:                             
    enabled: false
    host: ''
    port: 8500
  # Port for Grey Matter Control. Used in catalog init and sidecar envvars.
  controlPort: 50000                  

# Configures the init container used to wait on various deployments to be ready
waiter:
  image: deciphernow/k8s-waiter:latest
  service_account: 
    create: true
    name: waiter-sa

dashboard:
  version: "latest"
  image: 'docker.production.deciphernow.com/deciphernow/gm-dashboard:{{ $.Values.dashboard.version }}'
  port: 1337
  envvars:
  - name: FABRIC_SERVER
    value: '{{ tpl .Values.dashboard.fabric_server . }}'
  - name: CONFIG_SERVER
    value: '{{ tpl .Values.dashboard.config_server . }}'
  - name: USE_PROMETHEUS
    value: '{{ .Values.dashboard.use_prometheus }}'
  - name: OBJECTIVES_SERVER
    value: '{{ tpl .Values.dashboard.objectives_server . }}'
  - name: PROMETHEUS_SERVER
    value: '{{ .Values.dashboard.prometheus_server }}'
  - name: BASE_URL
    value: '{{ tpl .Values.dashboard.base_url . }}'
  - name: REQUEST_TIMEOUT
    value: '{{ .Values.dashboard.requestTimeout }}'
  - name: SERVER_SSL_ENABLED
    value: "true"
  - name: SERVER_SSL_CA
    value: {{ .Values.dashboard.secret.mountPoint}}/{{ .Values.dashboard.secret.secret_keys.ca }}
  - name: SERVER_SSL_CERT
    value: {{ .Values.dashboard.secret.mountPoint}}/{{ .Values.dashboard.secret.secret_keys.cert }}
  - name: SERVER_SSL_KEY
    value: {{ .Values.dashboard.secret.mountPoint}}/{{ .Values.dashboard.secret.secret_keys.key }}

 
 
  fabric_server: '/services/catalog/latest/'
  use_prometheus: 'true'
  objectives_server: '/services/slo/latest/'
  config_server: '/services/gm-control-api/latest/v1.0'
  prometheus_server: '/services/prometheus/latest/api/v1/'
  base_url: '/services/dashboard/{{ $.Values.global.dashboard.version }}/'
  requestTimeout: '15000'
  version: 3.3.1
  imagePullPolicy: IfNotPresent
  pvcSize: 80
  serviceAccount:
    create: true
  resources:
    requests:
      memory: '8Gi'
      cpu: '1'
    limits:
      memory: '12Gi'
      cpu: '2'
  secret:
    secret_name: dashboard-certs
    mountPoint: /certs
    secret_keys:
      ca: ca.crt
      cert: service.crt
      key: service.key

sidecar:
  version: '{{- $.Values.global.dashboard.sidecar.version | default $.Values.global.sidecar.version }}'
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'dashboard'
  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key

prometheus:
  #Size is in GB
  pvcSize: 80
  image: 'prom/prometheus:v2.7.1'
  imagePullPolicy: IfNotPresent
  zk_announce_path: '/services/prometheus/2.7.1'
  version: '2.7.1'
  replica_count: 1
  data_mount_point: /var/lib/prometheus/data
  config_mount_point: /etc/prometheus
  #private_image: false
  start_cmd: /bin/prometheus
  serviceAccount:
    create: false
    name: prometheus-sa
  resources:
    requests:
      memory: "20Gi"
      cpu: "1"
    limits:
      memory: "40Gi"
      cpu: "2"

sidecar_prometheus:
  version: '{{- $.Values.global.dashboard.sidecar_prometheus.version | default $.Values.global.sidecar.version }}'
  image: 'docker.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar_prometheus.version $ }}'
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'prometheus'
  secret:
    secret_name: sidecar-certs
    mountPoint: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
