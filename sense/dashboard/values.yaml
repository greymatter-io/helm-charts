# Grey Matter Dashboard Defaults

global:
  # Used as imagePullSecrets value
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kubernetes", or "openshift"
  environment: openshift
  # Used to configure control and control-api environment variables
  zone: zone-default-zone
  # Whether to use consul for service discovery
  consul:
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
    # Comma delimited string of namespaces for control to monitor. Also used by prometheus.
    additional_namespaces:
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: false
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
  # Global sidecar configuration (supports global version and envvars)
  sidecar:
    version: 1.5.0
  # To use the global certs or not
  global_certs:
    enabled: true

dashboard:
  # Name used for the deployment and service resources
  name: dashboard
  # Dashboard app version
  version: 3.4.2
  image: 'docker.greymatter.io/development/gm-dashboard:{{ $.Values.dashboard.version }}'
  # Port for the dashboard app
  port: 1337
  # When to pull container images, used in the deployment
  image_pull_policy: IfNotPresent
  # CPU and memory limits for the dashboard app
  resources:
    requests:
      memory: '2Gi'
      cpu: '1'
    limits:
      memory: '6Gi'
      cpu: '2'
  secret:
    enabled: true
    secret_name: dashboard-certs
    mount_point: /certs
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  envvars:
    fabric_server:
      type: "value"
      value: '/services/catalog/latest/'
    config_server:
      type: "value"
      value: '/services/control-api/latest/v1.0'
    use_prometheus:
      type: "value"
      value: 'true'
    objectives_server:
      type: "value"
      value: '/services/slo/latest/'
    prometheus_server:
      type: "value"
      value: '/services/prometheus/latest/api/v1/'
    base_url:
      type: "value"
      value: '/services/dashboard/{{ $.Values.dashboard.version }}/'
    request_timeout:
      type: "value"
      value: '15000'
    server_ssl_enabled:
      type: "value"
      value: "{{ not .Values.global.spire.enabled }}"
    server_ssl_ca:
      type: "value"
      value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.ca }}'
    server_ssl_cert:
      type: "value"
      value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.cert }}'
    server_ssl_key:
      type: "value"
      value: '{{ .Values.dashboard.secret.mount_point}}/{{ .Values.dashboard.secret.secret_keys.key }}'

# Sidecar configuration for dashboard
sidecar_dashboard:
  # Uses global.sidecar.version if set
  version: '{{- $.Values.global.sidecar.version | default "latest" }}'
  image: 'docker.greymatter.io/development/gm-proxy:{{ tpl $.Values.sidecar_dashboard.version $ }}'
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  secret:
    enabled: true
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  # Overrides global.sidecar.envvars
  envvars:
    xds_cluster:
      type: value
      value: '{{ .Values.dashboard.name }}'
  # When to pull images, used in the deployment
  image_pull_policy: IfNotPresent
  # CPU and memory limits for the sidecar
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

prometheus:
  # Used by promethues-configmap.yaml to enable prometheus metrics scraping for sense
  sense_enabled: false
  # Name used for the deployment and service resources
  name: prometheus
  # PVC size in Gb, used in prometheus.yaml volumeClaimTemplate
  pvc_size: 80
  image: 'prom/prometheus:v2.7.1'
  # When to pull container images, used in the deployment
  image_pull_policy: IfNotPresent
  # Prometheus service version
  version: '2.7.1'
  # Number of replicas for the deployment
  replica_count: 1
  # Location where prometheus data should be mounted in the container
  data_mount_point: /var/lib/prometheus/data
  # Location where prometheus config should be mounted
  config_mount_point: /etc/prometheus
  # If true, don't use an image pull secret
  private_image: false
  # Command to start prometheus
  start_cmd: /bin/prometheus
  # Service account for prometheus
  service_account:
    create: true
    name: prometheus-sa
  resources:
    requests:
      memory: "8Gi"
      cpu: "1"
    limits:
      memory: "12Gi"
      cpu: "2"


# Sidecar configuration for prometheus
sidecar_prometheus:
  # Uses global.sidecar.version if set
  version: '{{- $.Values.global.sidecar.version | default "latest" }}'
  image: 'docker.greymatter.io/development/gm-proxy:{{ tpl $.Values.sidecar_prometheus.version $ }}'
  # Port where the proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  secret:
    enabled: true
    secret_name: sidecar-certs
    mount_point: /etc/proxy/tls/sidecar
    secret_keys:
      ca: ca.crt
      cert: server.crt
      key: server.key
  # Overrides global.sidecar.envvars
  envvars:
    xds_cluster:
      type: value
      value: '{{ .Values.prometheus.name }}'
  # When to pull images, used in the deployment
  image_pull_policy: IfNotPresent
  # CPU and memory limits for the sidecar
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
