# Grey Matter Edge Chart Values

global:
  # Used as imagePullSecrets value for each subchart
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  environment: openshift

  # If global.environment is openshift, edge ingress access is typically determine by <route_url_name>.<namespace>.<domain>
  domain: development.deciphernow.com
  # If you choose to remove the namespace from the url you must ensure your
  # route_url_name is unique or openshift will throw errors.
  route_url_name: greymatter
  remove_namespace_from_url: 'false'

  exhibitor:
    replicas: 1
  # Zone for Grey Matter objects. Used in sidecar envvars
  zone: zone-default-zone
  # Whether to register services with Consul and where to find the Consul server
  consul:
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: true
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
edge:
  version: '1.5.1'
  image: 'docker.greymatter.io/development/gm-proxy:{{ tpl $.Values.edge.version $ }}'
  image_pull_policy: IfNotPresent
  # Port where the edge proxy will listen
  port: 10808
  # Port where the proxy will expose metrics
  metrics_port: 8081
  envvars:
    xds_cluster:
      type: value
      value: 'edge'
    proxy_dynamic:
      type: 'value'
      value: 'true'
    xds_zone:
      type: 'value'
      value: '{{ .Values.global.zone }}'
    xds_host:
      type: 'value'
      value: 'control.{{ .Release.Namespace }}.svc'
    xds_port:
      type: 'value'
      value: '{{ .Values.global.control.port }}'
    xds_node_id:
      type: 'value'
      value: 'default'
    envoy_admin_log_path:
      type: 'value'
      value: '/dev/stdout'

  # Optional resource options
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi

  # If set, enables egress TLS from the edge proxy using the secret specified in secret_name
  egress:
    secret:
      enabled: true
      secret_name: greymatter-edge-egress
      mount_point: /etc/proxy/tls/sidecar/
  # If set, enables ingress TLS on the edge proxy using the secret specified in secret_name
  ingress:
    # type is used to set how the edge k8s svc resource is created.  For depoyments using NGINX or Voyager or some other
    # provisioned ingress, leave this as "ClusterIP".   If you want an ingress point automatically created by the cloud provider
    # set this to "LoadBalancer"
    type: ClusterIP
    secret:
      enabled: true
      secret_name: greymatter-edge-ingress
      mount_point: /etc/proxy/tls/edge/

    # The following options configure the edge ingress based on the global.environment
    # If global.environment is openshift, a passthrough Route is configured with host set from the values specified in global.domain, global.route_url_name, and global.remove_namespace_from_url
    # If global.environment is not openshift, an ingress object is created with the specified apiVersion, annotations, and rules

    # If use_voyager is true make sure voyager is already installed
    use_voyager: false
    voyager:
      apiVersion: voyager.appscode.com/v1beta1
      # The annotation set for the ingress
      annotations:
        kubernetes.io/ingress.class: 'voyager'
        ingress.appscode.com/ssl-passthrough: 'true'
        # If using EKS, type should be LoadBalancer
        # If using voyager, type should be NodePort
        ingress.appscode.com/type: NodePort
      # The rule set you want your ingress controller to use
      rules:
        - tcp:
            port: '80'
            nodePort: '30001'
            backend:
              serviceName: edge
              servicePort: 10808
        - tcp:
            port: '443'
            nodePort: '30000'
            backend:
              serviceName: edge
              servicePort: 10808
    nginx:
      # For instance, these values will work for nginx ingress
      apiVersion: extensions/v1beta1
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "https"

      rules:
        - host: development.deciphernow.com
          http:
            paths:
              - path: /
                backend:
                  serviceName: edge
                  servicePort: 10808
