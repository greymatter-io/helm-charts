# Edge Values File

global:

  imagePullSecret: docker.secret
  
  environment: kubernetes
  domain: development.deciphernow.com
  # Edge access is typically determine by <route_url_name>.<namespace>.<domain>
  # Namespace is only removed whe setting remove_namespace_from_url to true
  #   If you choose to remove the namespace from the url you must ensure your
  #   route_url_name is unique or openshift will throw errors.
  route_url_name: greymatter
  remove_namespace_from_url: 'false'
  exhibitor:
    replicas: 1
  edge:
    version: latest
    enableTLS: true
    certPath: /etc/proxy/tls/edge
    egressDn: cn=edge
  consul:
    enabled: false
    host: ''
    port: 8500
  sidecar:
    version: latest
  spire:
    enabled: false
  mesh_tls:
    use_provided_certs: true

ingress_config:
  default_url: '{{ .Values.global.route_url_name }}.{{ .Release.Namespace }}.{{ .Values.global.domain }}'
  custom_url: '{{ .Values.global.route_url_name }}.{{ .Values.global.domain }}'

edge:
  egress_use_tls: 'true'
  inheaders_enabled: 'true'
  obs_enabled: 'false'
  obs_full_response: 'false'
  base_path: /services/edge/0.7.1
  acl_enabled: 'false'
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi

  ingress:
    # For ingress, you can specify which API verison  to use
    apiVersion: voyager.appscode.com/v1beta1
  
    # Specific annotations for your deployment
    # Choosing the ingress.appscode.com/type is important and depends on your environment type.
    #   - If using EKS, you need to configure the Type as LoadBalancder 
    #   - If using voyager, you need to configure the type as NodePort
    annotations: {}
    
    # Provide the rule set you want your ingress controller to use
    rules: []

  # These are the certs that the edge will use for ingress traffic into the mesh
  create_edge_secret: false
  certificates:
    ingress:
      name: greymatter-edge-ingress
    egress:
      name: greymatter-edge-egress
      mountPoint: /etc/proxy/tls/sidecar/

sidecar:
  version: '{{- $.Values.global.edge.version | default $.Values.global.sidecar.version }}'
  image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:{{ tpl $.Values.sidecar.version $ }}'
  metrics_key_function: depth
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  envvars:
    xds_cluster:
      type: value
      value: 'edge'


